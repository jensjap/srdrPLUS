<style>
  table,
  th,
  td {
    border: 1px solid rgb(237, 236, 236);
  }
</style>
<div
  x-data="screeningFormData"
  class="p-4 lg:p-8"
  @drop.prevent="drop()"
  @dragover.prevent="dragover($event)"
>
  <div class="flex">
    <h1 class="text-xl font-bold">Screening Form</h1>
    <button
      @click="addQuestion()"
      class="bg-srdrpurple text-white p-2 mx-4 cursor-pointer"
    >
      Add Question
    </button>
  </div>
  <div class="py-2">
    <template x-if="questions.length == 0">
      <h2 class="text-base text-gray-500">Add a question to get started</h2>
    </template>
    <template
      x-for="(question, question_index) in questions"
      :key="question.id"
    >
      <div
        class="relative shadow-md rounded-md mb-8 border"
        :class="dragging === question_index ? 'border-blue-600' : ''"
        draggable="true"
        @dragstart="dragging = question_index"
        @dragend="dragging = null"
      >
        <div
          class="absolute inset-0 opacity-50"
          :class="dropping === question_index ? 'bg-blue-200' : ''"
          x-show.transition="dragging !== null"
          @dragenter.prevent="if (question_index !== dragging) { dropping = question_index }"
          @dragleave="if (dropping === question_index) dropping = null"
        ></div>
        <div class="flex">
          <div
            class="cursor-move w-8 pt-4 border-r border-gray-300"
            title="Drag here to rearrange order of questions"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width="1.5"
              stroke="currentColor"
              class="w-8 h-8"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M8.25 15L12 18.75 15.75 15m-7.5-6L12 5.25 15.75 9"
              />
            </svg>
          </div>
          <div
            class="grow overflow-auto"
            draggable="true"
            @dragstart.prevent.stop
          >
            <div class="py-2 px-4">
              <template
                x-if="focusElement !== `question_name:${question_index}` && (question.name != '' && question.name != null)"
              >
                <h2
                  class="text-lg cursor-pointer"
                  x-text="`${question_index + 1}. ${question.name}`"
                  @click="focusElement = `question_name:${question_index}`"
                  title="Click here to edit question"
                ></h2>
              </template>
              <template
                x-if="focusElement !== `question_name:${question_index}` && (question.name == '' || question.name == null)"
              >
                <h2
                  class="text-lg cursor-pointer text-gray-400"
                  @click="focusElement = `question_name:${question_index}`"
                  title="Click here to edit question"
                >
                  click to add question
                </h2>
              </template>
              <template
                x-if="focusElement === `question_name:${question_index}`"
              >
                <input
                  x-trap="focusElement === `question_name:${question_index}`"
                  class="text-lg"
                  @blur="focusElement = null; updateQuestion(question, { name: $el.value })"
                  @keyup.enter="focusElement = null; updateQuestion(question, { name: $el.value })"
                  @keyup.esc="focusElement = null;"
                  :value="question.name"
                  type="text"
                />
              </template>

              <template
                x-if="focusElement !== `question_description:${question_index}` && (question.description != '' && question.description != null)"
              >
                <p
                  class="m-0 cursor-pointer"
                  x-text="question.description"
                  @click="focusElement = `question_description:${question_index}`"
                  title="Click here to edit instructions"
                ></p>
              </template>
              <template
                x-if="(focusElement !== `question_description:${question_index}`) && (question.description == '' || question.description == null)"
              >
                <p
                  class="m-0 cursor-pointer text-gray-400"
                  @click="focusElement = `question_description:${question_index}`"
                  title="Click here to edit instructions"
                >
                  click to add instructions
                </p>
              </template>
              <template
                x-if="focusElement === `question_description:${question_index}`"
              >
                <input
                  x-trap="focusElement === `question_description:${question_index}`"
                  @blur="focusElement = null; updateQuestion(question, { description: $el.value })"
                  @keyup.enter="focusElement = null; updateQuestion(question, { description: $el.value })"
                  @keyup.esc="focusElement = null;"
                  :value="question.description"
                  type="text"
                />
              </template>
            </div>
            <div class="py-2 px-4 overflow-auto block">
              <table
                class="h-0 w-0 table-auto border-separate border-spacing-1"
              >
                <thead>
                  <tr>
                    <td class="bg-white"></td>
                    <template
                      x-for="(column, column_index) in question.columns"
                    >
                      <th>
                        <div class="flex justify-center items-center">
                          <template
                            x-if="focusElement !== `question:${question_index}:column:${column_index}` && (column.title != '' && column.title != null)"
                          >
                            <div
                              class="p-2 grow whitespace-nowrap cursor-pointer"
                              x-text="column.title"
                              @click="focusElement = `question:${question_index}:column:${column_index}`"
                              title="Click here to edit column title"
                            ></div>
                          </template>
                          <template
                            x-if="focusElement !== `question:${question_index}:column:${column_index}` && (column.title == '' || column.title == null)"
                          >
                            <div
                              class="p-2 grow whitespace-nowrap cursor-pointer text-gray-400"
                              @click="focusElement = `question:${question_index}:column:${column_index}`"
                              title="Click here to edit column title"
                            >
                              click to add column header
                            </div></template
                          >
                          <template
                            x-if="focusElement === `question:${question_index}:column:${column_index}`"
                          >
                            <input
                              x-trap="focusElement === `question:${question_index}:column:${column_index}`"
                              class="p-2 grow whitespace-nowrap text-center"
                              oninput="this.style.width = (this.value.length) + 'ch';"
                              onfocus="this.style.width = (this.value.length) + 'ch';"
                              @blur="focusElement = null; updateColumn(column, { name: $el.value })"
                              @keyup.enter="focusElement = null; updateColumn(column, { name: $el.value })"
                              @keyup.esc="focusElement = null;"
                              :value="column.title"
                              type="text"
                          /></template>
                          <div
                            @click="deleteColumn(column)"
                            class="text-red-900 cursor-pointer p-2 border-l border-gray-300 hover:bg-red-100"
                          >
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke-width="1.5"
                              stroke="currentColor"
                              class="w-4 h-4"
                            >
                              <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"
                              />
                            </svg>
                          </div>
                        </div>
                      </th>
                    </template>
                    <th
                      class="whitespace-nowrap cursor-pointer flex justify-between items-center h-full"
                      @click="addColumn(question)"
                    >
                      <div class="p-2">Click to add column</div>
                    </th>
                  </tr>
                </thead>
                <tbody>
                  <template x-for="(row, row_index) in (question.rows)">
                    <tr>
                      <th>
                        <div class="h-full flex justify-center items-start">
                          <template
                            x-if="focusElement !== `question:${question_index}:row:${row_index}` && (question.rows[row_index].title != '' && question.rows[row_index].title != null)"
                          >
                            <div
                              class="p-2 grow whitespace-nowrap cursor-pointer"
                              x-text="question.rows[row_index] !== undefined && question.rows[row_index].title"
                              @click="focusElement = `question:${question_index}:row:${row_index}`"
                              title="Click here to edit row title"
                            ></div>
                          </template>
                          <template
                            x-if="focusElement !== `question:${question_index}:row:${row_index}` && (question.rows[row_index].title == '' || question.rows[row_index].title == null)"
                          >
                            <div
                              class="p-2 grow whitespace-nowrap cursor-pointer text-gray-400"
                              @click="focusElement = `question:${question_index}:row:${row_index}`"
                              title="Click here to edit row title"
                            >
                              click to add row header
                            </div></template
                          >
                          <template
                            x-if="focusElement === `question:${question_index}:row:${row_index}`"
                            ><input
                              x-trap="focusElement === `question:${question_index}:row:${row_index}`"
                              class="p-2 grow whitespace-nowrap text-center"
                              oninput="this.style.width = (this.value.length) + 'ch';"
                              onfocus="this.style.width = (this.value.length) + 'ch';"
                              @blur="focusElement = null; updateRow(row, { name: $el.value })"
                              @keyup.enter="focusElement = null; updateRow(row, { name: $el.value })"
                              @keyup.esc="focusElement = null;"
                              :value="question.rows[row_index].title"
                              type="text"
                          /></template>
                          <div
                            @click="deleteRow(row)"
                            class="h-full text-red-900 cursor-pointer p-2 border-l border-gray-300 hover:bg-red-100"
                          >
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke-width="1.5"
                              stroke="currentColor"
                              class="w-4 h-4"
                            >
                              <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"
                              />
                            </svg>
                          </div>
                        </div>
                      </th>

                      <template
                        x-for="(column, column_index) in question.columns"
                      >
                        <td>
                          <template
                            x-if="question.cells[row_index] !== undefined &&  question.cells[row_index][column_index] !== undefined && question.cells[row_index][column_index] !== null"
                          >
                            <div
                              class="flex justify-center items-stretch h-full"
                            >
                              <div class="p-2 grow">
                                <template
                                  x-if="question.cells[row_index][column_index].cell_type == 'text'"
                                >
                                  <div>
                                    <div
                                      class="whitespace-nowrap border-b-2 border-gray-300"
                                    >
                                      Text Field
                                    </div>
                                    <label class="whitespace-nowrap"
                                      >Min character length
                                      <input
                                        name="min"
                                        type="number"
                                        x-model="question.cells[row_index][column_index].min"
                                        x-on:change.debounce.500ms="updateCell(question.cells[row_index][column_index], { min: $el.value })"
                                    /></label>
                                    <label class="whitespace-nowrap"
                                      >Max character length
                                      <input
                                        name="max"
                                        type="number"
                                        x-model="question.cells[row_index][column_index].max"
                                        x-on:change.debounce.500ms="updateCell(question.cells[row_index][column_index], { max: $el.value })"
                                    /></label>
                                  </div>
                                </template>
                                <template
                                  x-if="question.cells[row_index][column_index].cell_type == 'numeric'"
                                >
                                  <div>
                                    <div
                                      class="whitespace-nowrap border-b-2 border-gray-300"
                                    >
                                      Numeric Field
                                    </div>
                                    <div
                                      class="flex justify-between items-center"
                                    >
                                      <label class="whitespace-nowrap"
                                        >Allow ~, <, >, ≤, ≥
                                        <input
                                          name="equality"
                                          type="checkbox"
                                          class="!m-0 cursor-pointer"
                                          x-model="question.cells[row_index][column_index].with_equality"
                                          @click="updateCell(question.cells[row_index][column_index], { with_equality: $el.checked })"
                                      /></label>
                                    </div>
                                    <label
                                      >Min value allowed
                                      <input
                                        name="min"
                                        type="number"
                                        x-model="question.cells[row_index][column_index].min"
                                        x-on:change.debounce.500ms="updateCell(question.cells[row_index][column_index], { min: $el.value })"
                                    /></label>
                                    <label
                                      >Max value allowed
                                      <input
                                        name="max"
                                        type="number"
                                        x-model="question.cells[row_index][column_index].max"
                                        x-on:change.debounce.500ms="updateCell(question.cells[row_index][column_index], { max: $el.value })"
                                    /></label>
                                  </div>
                                </template>
                                <template
                                  x-if="question.cells[row_index][column_index].cell_type == 'checkbox'"
                                >
                                  <div
                                    class="h-full flex flex-col justify-between"
                                  >
                                    <div
                                      class="whitespace-nowrap border-b-2 border-gray-300"
                                    >
                                      Checkbox (multi-choice)
                                    </div>
                                    <div
                                      class="grow border-b-2 border-gray-300 whitespace-nowrap min-h-[96px]"
                                    >
                                      <template
                                        x-for="(option, option_index) in question.cells[row_index][column_index].options"
                                        ><div
                                          class="flex justify-between items-center"
                                        >
                                          <div
                                            class="min-w-[3rem]"
                                            x-text="option.name"
                                          ></div>
                                          <div
                                            class="flex justify-center items-center mx-2"
                                          >
                                            <label
                                              class="cursor-pointer text-gray-700 text-xs"
                                              >with follow-up
                                              <input
                                                class="!m-0 cursor-pointer"
                                                type="checkbox"
                                                x-model="option.with_followup"
                                                x-on:change="updateOption(option, { with_followup: $el.checked })"
                                            /></label>
                                            <div
                                              class="flex justify-center items-center mx-2"
                                            >
                                              <div class="w-6 cursor-pointer">
                                                <svg
                                                  xmlns="http://www.w3.org/2000/svg"
                                                  fill="none"
                                                  viewBox="0 0 24 24"
                                                  stroke-width="1.5"
                                                  stroke="currentColor"
                                                  class="w-6 h-6"
                                                  @click="moveOption(option, option_index - 1)"
                                                >
                                                  <path
                                                    stroke-linecap="round"
                                                    stroke-linejoin="round"
                                                    d="M15 11.25l-3-3m0 0l-3 3m3-3v7.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                                                  />
                                                </svg>
                                              </div>
                                              <div class="w-6 cursor-pointer">
                                                <svg
                                                  xmlns="http://www.w3.org/2000/svg"
                                                  fill="none"
                                                  viewBox="0 0 24 24"
                                                  stroke-width="1.5"
                                                  stroke="currentColor"
                                                  class="w-6 h-6"
                                                  @click="moveOption(option, option_index + 1)"
                                                >
                                                  <path
                                                    stroke-linecap="round"
                                                    stroke-linejoin="round"
                                                    d="M9 12.75l3 3m0 0l3-3m-3 3v-7.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                                                  />
                                                </svg>
                                              </div>
                                            </div>
                                            <div
                                              @click="deleteOption(option)"
                                              class="text-red-900 cursor-pointer"
                                            >
                                              <svg
                                                xmlns="http://www.w3.org/2000/svg"
                                                fill="none"
                                                viewBox="0 0 24 24"
                                                stroke-width="1.5"
                                                stroke="currentColor"
                                                class="w-4 h-4"
                                              >
                                                <path
                                                  stroke-linecap="round"
                                                  stroke-linejoin="round"
                                                  d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"
                                                />
                                              </svg>
                                            </div>
                                          </div></div
                                      ></template>
                                    </div>
                                    <div>
                                      <label class="text-xs"
                                        >Add answer choice option
                                        <input
                                          name="option"
                                          type="text"
                                          @keyup.enter="if ($el.value === '') { return }; createOption(question.cells[row_index][column_index], $el.value); $el.value = ''"
                                      /></label>
                                    </div>
                                  </div>
                                </template>
                                <template
                                  x-if="question.cells[row_index][column_index].cell_type == 'dropdown'"
                                >
                                  <div
                                    class="h-full flex flex-col justify-between"
                                  >
                                    <div
                                      class="whitespace-nowrap border-b-2 border-gray-300"
                                    >
                                      Dropdown (single-choice)
                                    </div>
                                    <div
                                      class="grow border-b-2 border-gray-300 whitespace-nowrap min-h-[96px]"
                                    >
                                      <template
                                        x-for="(option, option_index) in question.cells[row_index][column_index].options"
                                        ><div
                                          class="flex justify-between items-center"
                                        >
                                          <div
                                            class="min-w-[3rem]"
                                            x-text="option.name"
                                          ></div>
                                          <div
                                            class="flex justify-center items-center mx-2"
                                          >
                                            <div
                                              class="flex justify-center items-center mx-2"
                                            >
                                              <div class="w-6 cursor-pointer">
                                                <svg
                                                  xmlns="http://www.w3.org/2000/svg"
                                                  fill="none"
                                                  viewBox="0 0 24 24"
                                                  stroke-width="1.5"
                                                  stroke="currentColor"
                                                  class="w-6 h-6"
                                                  @click="moveOption(option, option_index - 1)"
                                                >
                                                  <path
                                                    stroke-linecap="round"
                                                    stroke-linejoin="round"
                                                    d="M15 11.25l-3-3m0 0l-3 3m3-3v7.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                                                  />
                                                </svg>
                                              </div>
                                              <div class="w-6 cursor-pointer">
                                                <svg
                                                  xmlns="http://www.w3.org/2000/svg"
                                                  fill="none"
                                                  viewBox="0 0 24 24"
                                                  stroke-width="1.5"
                                                  stroke="currentColor"
                                                  class="w-6 h-6"
                                                  @click="moveOption(option, option_index + 1)"
                                                >
                                                  <path
                                                    stroke-linecap="round"
                                                    stroke-linejoin="round"
                                                    d="M9 12.75l3 3m0 0l3-3m-3 3v-7.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                                                  />
                                                </svg>
                                              </div>
                                            </div>
                                            <div
                                              @click="deleteOption(option)"
                                              class="text-red-900 cursor-pointer"
                                            >
                                              <svg
                                                xmlns="http://www.w3.org/2000/svg"
                                                fill="none"
                                                viewBox="0 0 24 24"
                                                stroke-width="1.5"
                                                stroke="currentColor"
                                                class="w-4 h-4"
                                              >
                                                <path
                                                  stroke-linecap="round"
                                                  stroke-linejoin="round"
                                                  d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"
                                                />
                                              </svg>
                                            </div>
                                          </div></div
                                      ></template>
                                    </div>
                                    <div>
                                      <label class="text-xs"
                                        >Add answer choice option
                                        <input
                                          name="option"
                                          type="text"
                                          @keyup.enter="if ($el.value === '') { return }; createOption(question.cells[row_index][column_index], $el.value); $el.value = ''"
                                      /></label>
                                    </div>
                                  </div>
                                </template>
                                <template
                                  x-if="question.cells[row_index][column_index].cell_type == 'radio'"
                                >
                                  <div
                                    class="h-full flex flex-col justify-between"
                                  >
                                    <div
                                      class="whitespace-nowrap border-b-2 border-gray-300"
                                    >
                                      Radio (single-choice)
                                    </div>
                                    <div
                                      class="grow border-b-2 border-gray-300 whitespace-nowrap min-h-[96px]"
                                    >
                                      <template
                                        x-for="(option, option_index) in question.cells[row_index][column_index].options"
                                        ><div
                                          class="flex justify-between items-center"
                                        >
                                          <div
                                            class="min-w-[3rem]"
                                            x-text="option.name"
                                          ></div>
                                          <div
                                            class="flex justify-center items-center mx-2"
                                          >
                                            <label
                                              class="cursor-pointer text-gray-700 text-xs"
                                              >with follow-up
                                              <input
                                                class="!m-0 cursor-pointer"
                                                type="checkbox"
                                                x-model="option.with_followup"
                                                x-on:change="updateOption(option, { with_followup: $el.checked })"
                                            /></label>
                                            <div
                                              class="flex justify-center items-center mx-2"
                                            >
                                              <div class="w-6 cursor-pointer">
                                                <svg
                                                  xmlns="http://www.w3.org/2000/svg"
                                                  fill="none"
                                                  viewBox="0 0 24 24"
                                                  stroke-width="1.5"
                                                  stroke="currentColor"
                                                  class="w-6 h-6"
                                                  @click="moveOption(option, option_index - 1)"
                                                >
                                                  <path
                                                    stroke-linecap="round"
                                                    stroke-linejoin="round"
                                                    d="M15 11.25l-3-3m0 0l-3 3m3-3v7.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                                                  />
                                                </svg>
                                              </div>
                                              <div class="w-6 cursor-pointer">
                                                <svg
                                                  xmlns="http://www.w3.org/2000/svg"
                                                  fill="none"
                                                  viewBox="0 0 24 24"
                                                  stroke-width="1.5"
                                                  stroke="currentColor"
                                                  class="w-6 h-6"
                                                  @click="moveOption(option, option_index + 1)"
                                                >
                                                  <path
                                                    stroke-linecap="round"
                                                    stroke-linejoin="round"
                                                    d="M9 12.75l3 3m0 0l3-3m-3 3v-7.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                                                  />
                                                </svg>
                                              </div>
                                            </div>
                                            <div
                                              @click="deleteOption(option)"
                                              class="text-red-900 cursor-pointer"
                                            >
                                              <svg
                                                xmlns="http://www.w3.org/2000/svg"
                                                fill="none"
                                                viewBox="0 0 24 24"
                                                stroke-width="1.5"
                                                stroke="currentColor"
                                                class="w-4 h-4"
                                              >
                                                <path
                                                  stroke-linecap="round"
                                                  stroke-linejoin="round"
                                                  d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"
                                                />
                                              </svg>
                                            </div>
                                          </div></div
                                      ></template>
                                    </div>
                                    <div>
                                      <label class="text-xs"
                                        >Add answer choice option
                                        <input
                                          name="option"
                                          type="text"
                                          @keyup.enter="if ($el.value === '') { return }; createOption(question.cells[row_index][column_index], $el.value); $el.value = ''"
                                      /></label>
                                    </div>
                                  </div>
                                </template>
                                <template
                                  x-if="question.cells[row_index][column_index].cell_type == 'select-one'"
                                >
                                  <div
                                    class="h-full flex flex-col justify-between"
                                  >
                                    <div
                                      class="whitespace-nowrap border-b-2 border-gray-300"
                                    >
                                      Select-One (with write-in)
                                    </div>
                                    <div
                                      class="grow border-b-2 border-gray-300 whitespace-nowrap min-h-[96px]"
                                    >
                                      <template
                                        x-for="(option, option_index) in question.cells[row_index][column_index].options"
                                        ><div
                                          class="flex justify-between items-center"
                                        >
                                          <div
                                            class="min-w-[3rem]"
                                            x-text="option.name"
                                          ></div>
                                          <div
                                            class="flex justify-center items-center mx-2"
                                          >
                                            <div
                                              class="flex justify-center items-center mx-2"
                                            >
                                              <div class="w-6 cursor-pointer">
                                                <svg
                                                  xmlns="http://www.w3.org/2000/svg"
                                                  fill="none"
                                                  viewBox="0 0 24 24"
                                                  stroke-width="1.5"
                                                  stroke="currentColor"
                                                  class="w-6 h-6"
                                                  @click="moveOption(option, option_index - 1)"
                                                >
                                                  <path
                                                    stroke-linecap="round"
                                                    stroke-linejoin="round"
                                                    d="M15 11.25l-3-3m0 0l-3 3m3-3v7.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                                                  />
                                                </svg>
                                              </div>
                                              <div class="w-6 cursor-pointer">
                                                <svg
                                                  xmlns="http://www.w3.org/2000/svg"
                                                  fill="none"
                                                  viewBox="0 0 24 24"
                                                  stroke-width="1.5"
                                                  stroke="currentColor"
                                                  class="w-6 h-6"
                                                  @click="moveOption(option, option_index + 1)"
                                                >
                                                  <path
                                                    stroke-linecap="round"
                                                    stroke-linejoin="round"
                                                    d="M9 12.75l3 3m0 0l3-3m-3 3v-7.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                                                  />
                                                </svg>
                                              </div>
                                            </div>
                                            <div
                                              @click="deleteOption(option)"
                                              class="text-red-900 cursor-pointer"
                                            >
                                              <svg
                                                xmlns="http://www.w3.org/2000/svg"
                                                fill="none"
                                                viewBox="0 0 24 24"
                                                stroke-width="1.5"
                                                stroke="currentColor"
                                                class="w-4 h-4"
                                              >
                                                <path
                                                  stroke-linecap="round"
                                                  stroke-linejoin="round"
                                                  d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"
                                                />
                                              </svg>
                                            </div>
                                          </div></div
                                      ></template>
                                    </div>
                                    <div>
                                      <label class="text-xs"
                                        >Add answer choice option
                                        <input
                                          name="option"
                                          type="text"
                                          @keyup.enter="if ($el.value === '') { return }; createOption(question.cells[row_index][column_index], $el.value); $el.value = ''"
                                      /></label>
                                    </div>
                                  </div>
                                </template>
                                <template
                                  x-if="question.cells[row_index][column_index].cell_type == 'select-multiple'"
                                >
                                  <div
                                    class="h-full flex flex-col justify-between"
                                  >
                                    <div
                                      class="whitespace-nowrap border-b-2 border-gray-300"
                                    >
                                      Select-Multiple (with write-in)
                                    </div>
                                    <div
                                      class="grow border-b-2 border-gray-300 whitespace-nowrap min-h-[96px]"
                                    >
                                      <template
                                        x-for="(option, option_index) in question.cells[row_index][column_index].options"
                                        ><div
                                          class="flex justify-between items-center"
                                        >
                                          <div
                                            class="min-w-[3rem]"
                                            x-text="option.name"
                                          ></div>
                                          <div
                                            class="flex justify-center items-center mx-2"
                                          >
                                            <div
                                              class="flex justify-center items-center mx-2"
                                            >
                                              <div class="w-6 cursor-pointer">
                                                <svg
                                                  xmlns="http://www.w3.org/2000/svg"
                                                  fill="none"
                                                  viewBox="0 0 24 24"
                                                  stroke-width="1.5"
                                                  stroke="currentColor"
                                                  class="w-6 h-6"
                                                  @click="moveOption(option, option_index - 1)"
                                                >
                                                  <path
                                                    stroke-linecap="round"
                                                    stroke-linejoin="round"
                                                    d="M15 11.25l-3-3m0 0l-3 3m3-3v7.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                                                  />
                                                </svg>
                                              </div>
                                              <div class="w-6 cursor-pointer">
                                                <svg
                                                  xmlns="http://www.w3.org/2000/svg"
                                                  fill="none"
                                                  viewBox="0 0 24 24"
                                                  stroke-width="1.5"
                                                  stroke="currentColor"
                                                  class="w-6 h-6"
                                                  @click="moveOption(option, option_index + 1)"
                                                >
                                                  <path
                                                    stroke-linecap="round"
                                                    stroke-linejoin="round"
                                                    d="M9 12.75l3 3m0 0l3-3m-3 3v-7.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                                                  />
                                                </svg>
                                              </div>
                                            </div>
                                            <div
                                              @click="deleteOption(option)"
                                              class="text-red-900 cursor-pointer"
                                            >
                                              <svg
                                                xmlns="http://www.w3.org/2000/svg"
                                                fill="none"
                                                viewBox="0 0 24 24"
                                                stroke-width="1.5"
                                                stroke="currentColor"
                                                class="w-4 h-4"
                                              >
                                                <path
                                                  stroke-linecap="round"
                                                  stroke-linejoin="round"
                                                  d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"
                                                />
                                              </svg>
                                            </div>
                                          </div></div
                                      ></template>
                                    </div>
                                    <div>
                                      <label class="text-xs"
                                        >Add answer choice option
                                        <input
                                          name="option"
                                          type="text"
                                          @keyup.enter="if ($el.value === '') { return }; createOption(question.cells[row_index][column_index], $el.value); $el.value = ''"
                                      /></label>
                                    </div>
                                  </div>
                                </template>
                              </div>
                              <div
                                @click="deleteCellField(question.cells[row_index][column_index])"
                                class="text-red-900 cursor-pointer p-2 border-l border-gray-300 hover:bg-red-100"
                              >
                                <svg
                                  xmlns="http://www.w3.org/2000/svg"
                                  fill="none"
                                  viewBox="0 0 24 24"
                                  stroke-width="1.5"
                                  stroke="currentColor"
                                  class="w-4 h-4"
                                >
                                  <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"
                                  />
                                </svg>
                              </div>
                            </div>
                          </template>
                          <template
                            x-if="question.cells[row_index] !== undefined && question.cells[row_index][column_index] === null"
                          >
                            <div class="p-2 flex flex-col justify-center">
                              <div
                                class="whitespace-nowrap border-b-2 border-gray-300"
                              >
                                Click below to add field
                              </div>
                              <span
                                @click="createCell(row, column, 'text')"
                                class="cursor-pointer hover:text-gray-500 overflow-ellipsis whitespace-nowrap"
                                >- Text</span
                              >
                              <span
                                @click="createCell(row, column, 'numeric')"
                                class="cursor-pointer hover:text-gray-500 overflow-ellipsis whitespace-nowrap"
                                >- Numeric</span
                              >
                              <span
                                @click="createCell(row, column, 'checkbox')"
                                class="cursor-pointer hover:text-gray-500 overflow-ellipsis whitespace-nowrap"
                                >- Checkbox (Multiple)</span
                              >
                              <span
                                @click="createCell(row, column, 'dropdown')"
                                class="cursor-pointer hover:text-gray-500 overflow-ellipsis whitespace-nowrap"
                                >- Dropdown</span
                              >
                              <span
                                @click="createCell(row, column, 'radio')"
                                class="cursor-pointer hover:text-gray-500 overflow-ellipsis whitespace-nowrap"
                                >- Radio</span
                              >
                              <span
                                @click="createCell(row, column, 'select-one')"
                                class="cursor-pointer hover:text-gray-500 overflow-ellipsis whitespace-nowrap"
                                >- Select One</span
                              >
                              <span
                                @click="createCell(row, column, 'select-multiple')"
                                class="cursor-pointer hover:text-gray-500 overflow-ellipsis whitespace-nowrap"
                                >- Select Multiple</span
                              >
                            </div>
                          </template>
                        </td>
                      </template>
                    </tr>
                  </template>
                  <tr>
                    <th
                      class="whitespace-nowrap cursor-pointer flex justify-between items-center h-full"
                      @click="addRow(question)"
                    >
                      <div class="p-2">Click to add row</div>
                    </th>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
          <div
            class="w-8 px-2 pt-4 border-l border-gray-300 cursor-pointer text-red-900 p-2 hover:bg-red-100"
            @click="deleteQuestion(question)"
            draggable="true"
            @dragstart.prevent.stop
          >
            <svg
              class="w-4 h-4"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width="1.5"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"
              />
            </svg>
          </div>
        </div>
      </div>
    </template>
  </div>
</div>

<script>
  document.addEventListener("alpine:init", () => {
    Alpine.data("screeningFormData", () => ({
      questions: [],
      focusElement: null,
      dragging: null,
      dropping: null,
      screening_form: {},
      init() {
        this.getData();
      },
      async getData() {
        const response = await fetch(window.location.href, {
          method: "GET",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
          },
        });
        const data = await response.json();
        this.questions = data.sf_questions;
        this.screening_form = data.screening_form;
      },
      async addQuestion() {
        const response = await fetch(
          `/screening_forms/${this.screening_form.id}/sf_questions`,
          {
            method: "POST",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json",
              "X-Requested-With": "XMLHttpRequest",
              "X-CSRF-Token": document.querySelector("[name='csrf-token']")
                .content,
            },
            credentials: "same-origin",
          }
        );
        if (response.status == 200) {
          toastr.success("Question added below succesfully!", null, {
            timeOut: 1000,
          });
          this.getData();
        } else {
          toastr.error("We've encountered an error", null, { timeOut: 1000 });
        }
      },
      async addColumn(question) {
        const response = await fetch(
          `/sf_questions/${question.id}/sf_columns`,
          {
            method: "POST",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json",
              "X-Requested-With": "XMLHttpRequest",
              "X-CSRF-Token": document.querySelector("[name='csrf-token']")
                .content,
            },
            credentials: "same-origin",
          }
        );
        if (response.status == 200) {
          toastr.success("Column added succesfully!", null, {
            timeOut: 1000,
          });
          this.getData();
        } else {
          toastr.error("We've encountered an error", null, { timeOut: 1000 });
        }
      },
      async addRow(question) {
        const response = await fetch(`/sf_questions/${question.id}/sf_rows`, {
          method: "POST",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
            "X-Requested-With": "XMLHttpRequest",
            "X-CSRF-Token": document.querySelector("[name='csrf-token']")
              .content,
          },
          credentials: "same-origin",
        });
        if (response.status == 200) {
          toastr.success("Row added succesfully!", null, {
            timeOut: 1000,
          });
          this.getData();
        } else {
          toastr.error("We've encountered an error", null, { timeOut: 1000 });
        }
      },
      async createCell(row, column, cell_type) {
        const response = await fetch(`/sf_cells`, {
          method: "POST",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
            "X-Requested-With": "XMLHttpRequest",
            "X-CSRF-Token": document.querySelector("[name='csrf-token']")
              .content,
          },
          credentials: "same-origin",
          body: JSON.stringify({
            sf_row_id: row.id,
            sf_column_id: column.id,
            cell_type,
          }),
        });
        if (response.status == 200) {
          toastr.success("Row added succesfully!", null, {
            timeOut: 1000,
          });
          this.getData();
        } else {
          toastr.error("We've encountered an error", null, { timeOut: 1000 });
        }
      },
      async createOption(cell, value) {
        const response = await fetch(`/sf_cells/${cell.id}/sf_options`, {
          method: "POST",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
            "X-Requested-With": "XMLHttpRequest",
            "X-CSRF-Token": document.querySelector("[name='csrf-token']")
              .content,
          },
          credentials: "same-origin",
          body: JSON.stringify({
            name: value,
          }),
        });
        if (response.status == 200) {
          toastr.success("Option added succesfully!", null, {
            timeOut: 1000,
          });
          this.getData();
        } else {
          const error = await response.text();
          toastr.error(`We've encountered an error: ${error}`, null, {
            timeOut: 1000,
          });
        }
      },
      drop() {
        if (this.dragging !== null && this.dropping !== null) {
          if (this.dragging < this.dropping)
            this.questions = [
              ...this.questions.slice(0, this.dragging),
              ...this.questions.slice(this.dragging + 1, this.dropping + 1),
              this.questions[this.dragging],
              ...this.questions.slice(this.dropping + 1),
            ];
          else
            this.questions = [
              ...this.questions.slice(0, this.dropping),
              this.questions[this.dragging],
              ...this.questions.slice(this.dropping, this.dragging),
              ...this.questions.slice(this.dragging + 1),
            ];
        }
        if (this.dragging != null && this.dropping != null) {
          this.updateQuestion(this.questions[this.dragging], {
            position_index: this.questions.map((question, index) => {
              return {
                sf_question_id: question.id,
                position: index,
              };
            }),
          });
        }
        this.dropping = null;
      },
      dragover(event) {
        event.dataTransfer.dropEffect = "move";
      },
      async deleteQuestion(question) {
        if (
          confirm(
            `Are you sure you want to delete question: "${
              question.name ? question.name : "unnamed"
            }"`
          )
        ) {
          const response = await fetch(`/sf_questions/${question.id}`, {
            method: "DELETE",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json",
              "X-Requested-With": "XMLHttpRequest",
              "X-CSRF-Token": document.querySelector("[name='csrf-token']")
                .content,
            },
            credentials: "same-origin",
          });
          if (response.status == 200) {
            toastr.success("Question removed succesfully!", null, {
              timeOut: 1000,
            });
            this.getData();
          } else {
            toastr.error("We've encountered an error", null, { timeOut: 1000 });
          }
        }
      },
      async deleteColumn(column) {
        if (confirm(`Are you sure you want to delete this column?`)) {
          const response = await fetch(`/sf_columns/${column.id}`, {
            method: "DELETE",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json",
              "X-Requested-With": "XMLHttpRequest",
              "X-CSRF-Token": document.querySelector("[name='csrf-token']")
                .content,
            },
            credentials: "same-origin",
          });
          if (response.status == 200) {
            toastr.success("Column removed succesfully!", null, {
              timeOut: 1000,
            });
            this.getData();
          } else {
            toastr.error("We've encountered an error", null, { timeOut: 1000 });
          }
        }
      },
      async deleteRow(row) {
        if (confirm(`Are you sure you want to delete this column?`)) {
          const response = await fetch(`/sf_rows/${row.id}`, {
            method: "DELETE",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json",
              "X-Requested-With": "XMLHttpRequest",
              "X-CSRF-Token": document.querySelector("[name='csrf-token']")
                .content,
            },
            credentials: "same-origin",
          });
          if (response.status == 200) {
            toastr.success("Row removed succesfully!", null, {
              timeOut: 1000,
            });
            this.getData();
          } else {
            toastr.error("We've encountered an error", null, { timeOut: 1000 });
          }
        }
      },

      async deleteCellField(cell) {
        if (confirm(`Are you sure you want to delete this field?`)) {
          const response = await fetch(`/sf_cells/${cell.id}`, {
            method: "DELETE",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json",
              "X-Requested-With": "XMLHttpRequest",
              "X-CSRF-Token": document.querySelector("[name='csrf-token']")
                .content,
            },
            credentials: "same-origin",
          });
          if (response.status == 200) {
            toastr.success("Field removed successfully!", null, {
              timeOut: 1000,
            });
            this.getData();
          } else {
            toastr.error("We've encountered an error", null, { timeOut: 1000 });
          }
        }
      },
      async checkExistingData(option) {
        const response = await fetch(
          `/sf_options/${option.id}/existing_data_check`,
          {
            method: "GET",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json",
              "X-Requested-With": "XMLHttpRequest",
              "X-CSRF-Token": document.querySelector("[name='csrf-token']")
                .content,
            },
            credentials: "same-origin",
          }
        );
        if (response.status == 200) {
          const data = await response.json();
          if (data.has_records) {
            alert("This option has existing answer submissions");
            this.deleteExistingData(option);
          }
        } else {
          toastr.error("We've encountered an error", null, { timeOut: 1000 });
        }
      },
      async deleteExistingData(option) {
        if (
          confirm(
            `Do you want to delete any existing submissions with answer "${option.name}"?`
          )
        ) {
          const response = await fetch(
            `/sf_options/${option.id}?deleteExistingAnswers=true}`,
            {
              method: "DELETE",
              headers: {
                Accept: "application/json",
                "Content-Type": "application/json",
                "X-Requested-With": "XMLHttpRequest",
                "X-CSRF-Token": document.querySelector("[name='csrf-token']")
                  .content,
              },
              credentials: "same-origin",
            }
          );
          if (response.status == 200) {
            toastr.success("Answer submissions removed successfully", null, {
              timeOut: 1000,
            });
            this.getData();
          } else {
            toastr.error("We've encountered an error", null, { timeOut: 1000 });
          }
        }
      },
      async deleteOption(option) {
        await this.checkExistingData(option);
        if (confirm(`Do you want to delete "${option.name}" as an option?`)) {
          const response = await fetch(`/sf_options/${option.id}`, {
            method: "DELETE",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json",
              "X-Requested-With": "XMLHttpRequest",
              "X-CSRF-Token": document.querySelector("[name='csrf-token']")
                .content,
            },
            credentials: "same-origin",
          });
          if (response.status == 200) {
            toastr.success("Option removed succesfully!", null, {
              timeOut: 1000,
            });
            this.getData();
          } else {
            toastr.error("We've encountered an error", null, { timeOut: 1000 });
          }
        }
      },
      moveOption(option, new_index) {
        this.updateOption(option, { new_index });
      },
      async updateOption(option, params) {
        const response = await fetch(`/sf_options/${option.id}`, {
          method: "PATCH",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
            "X-Requested-With": "XMLHttpRequest",
            "X-CSRF-Token": document.querySelector("[name='csrf-token']")
              .content,
          },
          credentials: "same-origin",
          body: JSON.stringify(params),
        });
        if (response.status == 200) {
          toastr.success("Option updated succesfully!", null, {
            timeOut: 1000,
          });
          this.getData();
        } else {
          toastr.error("We've encountered an error", null, { timeOut: 1000 });
        }
      },
      async updateQuestion(question, params) {
        const response = await fetch(`/sf_questions/${question.id}`, {
          method: "PATCH",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
            "X-Requested-With": "XMLHttpRequest",
            "X-CSRF-Token": document.querySelector("[name='csrf-token']")
              .content,
          },
          credentials: "same-origin",
          body: JSON.stringify(params),
        });
        if (response.status == 200) {
          toastr.success("Question updated succesfully!", null, {
            timeOut: 1000,
          });
          this.getData();
        } else {
          toastr.error("We've encountered an error", null, { timeOut: 1000 });
        }
      },
      async updateCell(cell, params) {
        const response = await fetch(`/sf_cells/${cell.id}`, {
          method: "PATCH",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
            "X-Requested-With": "XMLHttpRequest",
            "X-CSRF-Token": document.querySelector("[name='csrf-token']")
              .content,
          },
          credentials: "same-origin",
          body: JSON.stringify(params),
        });
        if (response.status == 200) {
          toastr.success("Field updated succesfully!", null, {
            timeOut: 1000,
          });
          this.getData();
        } else {
          toastr.error("We've encountered an error", null, { timeOut: 1000 });
        }
      },
      async updateColumn(column, params) {
        const response = await fetch(`/sf_columns/${column.id}`, {
          method: "PATCH",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
            "X-Requested-With": "XMLHttpRequest",
            "X-CSRF-Token": document.querySelector("[name='csrf-token']")
              .content,
          },
          credentials: "same-origin",
          body: JSON.stringify(params),
        });
        if (response.status == 200) {
          toastr.success("Column updated succesfully!", null, {
            timeOut: 1000,
          });
          this.getData();
        } else {
          toastr.error("We've encountered an error", null, { timeOut: 1000 });
        }
      },
      async updateRow(row, params) {
        const response = await fetch(`/sf_rows/${row.id}`, {
          method: "PATCH",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
            "X-Requested-With": "XMLHttpRequest",
            "X-CSRF-Token": document.querySelector("[name='csrf-token']")
              .content,
          },
          credentials: "same-origin",
          body: JSON.stringify(params),
        });
        if (response.status == 200) {
          toastr.success("Row updated succesfully!", null, {
            timeOut: 1000,
          });
          this.getData();
        } else {
          toastr.error("We've encountered an error", null, { timeOut: 1000 });
        }
      },
    }));
  });
</script>
