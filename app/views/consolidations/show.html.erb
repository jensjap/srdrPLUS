<div x-data="consolidate">
  <!-- prettier-ignore -->
  <%= render 'consolidations/partials/efps_sidebar' %>
  <% efps = ExtractionFormsProject.find_by(project: @project).extraction_forms_projects_sections.fifth %>
  <div
    class="px-4 lg:px-8 py-1 sm:flex sm:items-center z-[5] !sticky top-32 bg-gray-100"
  >
    <div class="sm:flex-auto">
      <div>
        <h1 class="text-base font-bold">
          Consolidate Section:
          <span
            class="bg-red-700 cursor-pointer text-white p-1 rounded"
            :class="mh?.current_citations_project?.section_name ? '!bg-srdrpurple' : '' "
            @click="efps_sidebar = true"
            x-text="mh?.current_citations_project?.section_name ? mh?.current_citations_project?.section_name : 'Loading...'"
            >Loading...</span
          >
        </h1>
      </div>
      <div>
        <div class="text-sm text-gray-700">
          <%= @citations_project.citation.name %>
        </div>
        <div class="text-sm text-gray-700">
          <%= @citations_project.citation.author_map_string %>
        </div>
      </div>
    </div>
  </div>
  <template x-if="mh?.current_citations_project?.efpst_id == 1">
    <%= render 'consolidations/partials/type1' %>
  </template>
  <template x-if="mh?.current_citations_project?.efpst_id == 2">
    <%= render 'consolidations/partials/type2' %>
  </template>
  <div class="px-4 lg:px-8 space-y-2 h-64 overflow-auto" id="json"></div>
</div>
<script>
  document.addEventListener("alpine:init", () => {
    Alpine.data("consolidate", () => ({
      efps_sidebar: false,
      efps_sections: [],
      mh: null,
      arm: {
        name: "",
        description: "",
      },

      init() {
        this.fetch_efps(<%= params[:efps_id] %>);
      },

      async createArm(lookup, eefps_id, name, description) {
        const params = {
          extractions_extraction_forms_projects_section: {
            extractions_extraction_forms_projects_sections_type1s_attributes: {
              0: {
                type1_attributes: {
                  name,
                  description,
                },
              },
            },
          },
        };

        const response = await fetch(
          `/extractions_extraction_forms_projects_sections/${eefps_id}`,
          {
            method: "PATCH",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json",
              "X-Requested-With": "XMLHttpRequest",
              "X-CSRF-Token": document.querySelector("[name='csrf-token']")
                .content,
            },
            credentials: "same-origin",
            body: JSON.stringify(params),
          }
        );
        const data = await response.json();
        if (response.status >= 200 && response.status < 300) {
          toastr.success("Saved successfully", null, { timeOut: 1000 });
          lookup[eefps_id] =
            data.extractions_extraction_forms_projects_sections_type1_id;
        } else {
          toastr.error("We've encountered an error", null, { timeOut: 1000 });
        }
      },

      async deleteArm(lookup, eefps_id) {
        const response = await fetch(
          `/extractions_extraction_forms_projects_sections_type1s/${lookup[eefps_id]}`,
          {
            method: "DELETE",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json",
              "X-Requested-With": "XMLHttpRequest",
              "X-CSRF-Token": document.querySelector("[name='csrf-token']")
                .content,
            },
            credentials: "same-origin",
          }
        );
        if (response.status >= 200 && response.status < 300) {
          toastr.success("Deleted successfully", null, { timeOut: 1000 });
          lookup[eefps_id] = undefined;
        } else {
          toastr.error("We've encountered an error", null, { timeOut: 1000 });
        }
      },

      bootSelect2(selectionField, record_id, multiple, tags) {
        const that = this;
        $(selectionField).select2({
          multiple,
          tags,
          allowClear: true,
          placeholder: "Select...",
          createTag: (params) => {
            var term = $.trim(params.term);

            if (term === "") {
              return null;
            }
            return {
              id: `<<<${term}>>>`,
              text: `Other: ${term}`,
            };
          },
        });
        $(selectionField).on("select2:select select2:unselect", function (e) {
          const value = $(this).val();
          that.updateRecord(record_id, value, multiple);
        });
      },

      async updateRecord(record_id, value, select2_multi) {
        let url;
        let params;
        if (select2_multi) {
          url =
            "extractions_extraction_forms_projects_sections_question_row_column_fields";
          params = {
            extractions_extraction_forms_projects_sections_question_row_column_field:
              {
                question_row_columns_question_row_column_option_ids: [
                  "",
                ].concat(value === null ? [] : value),
              },
          };
        } else {
          url = "records";
          params = {
            record: { name: value },
          };
        }

        const response = await fetch(`/${url}/${record_id}`, {
          method: "PATCH",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
            "X-Requested-With": "XMLHttpRequest",
            "X-CSRF-Token": document.querySelector("[name='csrf-token']")
              .content,
          },
          credentials: "same-origin",
          body: JSON.stringify(params),
        });
        if (response.status >= 200 && response.status < 300) {
          toastr.success("Saved successfully", null, { timeOut: 1000 });
        } else {
          toastr.error("We've encountered an error", null, { timeOut: 1000 });
        }
      },

      async fetch_efps(efps_id) {
        this.mh = null;
        let query_param = "";
        if (efps_id) {
          query_param = `&efps_id=${efps_id}`;
        }
        const response = await fetch(location.href + query_param, {
          method: "GET",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
          },
        });
        const data = await response.json();

        this.efps_sections = data.efps_sections;
        this.mh = data.mh;

        $("#json").empty();
        $("#json").append("<pre>" + JSON.stringify(data, null, 2) + "</pre>");
      },
    }));
  });
</script>
