<div x-data="consolidate">
  <!-- prettier-ignore -->
  <%= render 'consolidations/partials/efps_sidebar' %>
  <% efps = ExtractionFormsProject.find_by(project: @project).extraction_forms_projects_sections.fifth %>
  <div
    class="px-4 lg:px-8 py-1 sm:flex sm:items-center z-[5] !sticky top-32 bg-gray-100"
  >
    <div class="sm:flex-auto">
      <div>
        <h1 class="text-base font-bold">
          Consolidate Section:
          <span
            class="bg-red-700 cursor-pointer text-white p-1 rounded"
            :class="mh?.current_citations_project?.section_name ? '!bg-srdrpurple' : '' "
            @click="efps_sidebar = true"
            x-text="mh?.current_citations_project?.section_name ? mh?.current_citations_project?.section_name : 'Loading...'"
            >Loading...</span
          >
        </h1>
      </div>
      <div>
        <div class="text-sm text-gray-700">
          <%= @citations_project.citation.name %>
        </div>
        <div class="text-sm text-gray-700">
          <%= @citations_project.citation.author_map_string %>
        </div>
      </div>
    </div>
  </div>
  <div class="px-4 lg:px-8 space-y-2">
    <template x-if="mh !== null">
      <div>
        <template
          x-for="(question, question_index) in mh.questions"
          :key="question.question_id"
        >
          <div class="!text-sm mb-6">
            <div class="text-gray-700">
              <div
                class="font-bold"
                x-text="`${question_index + 1}. ${question.name}`"
              ></div>
              <div class="italic" x-text="question.description"></div>
            </div>
            <div class="space-y-2">
              <template x-if="mh?.current_citations_project?.by_arms">
                <template
                  x-for="(section_eefpst1, section_eefpst1_index) in mh?.current_citations_project?.current_section_eefpst1s"
                  :key="section_eefpst1.type1_id"
                >
                  <div
                    class="pb-4 rounded-sm overflow-clip"
                    :class="{
                      'border border-green-200': section_eefpst1_index % 10 == 0,
                      'border border-red-200': section_eefpst1_index % 10 == 1,
                      'border border-blue-200': section_eefpst1_index % 10 == 2,
                      'border border-yellow-200': section_eefpst1_index % 10 == 3,
                      'border border-gray-200': section_eefpst1_index % 10 == 4,
                      'border border-orange-200': section_eefpst1_index % 10 == 5,
                      'border border-purple-200': section_eefpst1_index % 10 == 6,
                      'border border-rose-200': section_eefpst1_index % 10 == 7,
                      'border border-indigo-200': section_eefpst1_index % 10 == 8,
                      'border border-teal-200': section_eefpst1_index % 10 == 9,
                    }"
                  >
                    <div
                      class="p-1"
                      :class="{
                        'bg-green-200': section_eefpst1_index % 10 == 0,
                        'bg-red-200': section_eefpst1_index % 10 == 1,
                        'bg-blue-200': section_eefpst1_index % 10 == 2,
                        'bg-yellow-200': section_eefpst1_index % 10 == 3,
                        'bg-gray-200': section_eefpst1_index % 10 == 4,
                        'bg-orange-200': section_eefpst1_index % 10 == 5,
                        'bg-purple-200': section_eefpst1_index % 10 == 6,
                        'bg-rose-200': section_eefpst1_index % 10 == 7,
                        'bg-indigo-200': section_eefpst1_index % 10 == 8,
                        'bg-teal-200': section_eefpst1_index % 10 == 9,
                      }"
                      x-text="`${section_eefpst1.name} (${section_eefpst1.description})`"
                    ></div>
                    <%= render 'consolidations/partials/type2' %>
                  </div>
                </template>
              </template>
              <template x-if="mh?.current_citations_project?.by_arms == false">
                <%= render 'consolidations/partials/type2' %>
              </template>
            </div>
          </div>
        </template>
      </div>
    </template>
  </div>
  <div class="px-4 lg:px-8 space-y-2 h-64 overflow-auto" id="json"></div>
</div>
<script>
  document.addEventListener("alpine:init", () => {
    Alpine.data("consolidate", () => ({
      efps_sidebar: false,
      efps_sections: [],
      mh: null,

      init() {
        this.fetch_efps();
      },

      bootSelect2(selectionField, record_id, multiple, tags) {
        const that = this;
        $(selectionField).select2({
          multiple,
          tags,
          allowClear: true,
          placeholder: "Select...",
          createTag: (params) => {
            var term = $.trim(params.term);

            if (term === "") {
              return null;
            }
            return {
              id: `<<<${term}>>>`,
              text: `Other: ${term}`,
            };
          },
        });
        $(selectionField).on("select2:select select2:unselect", function (e) {
          const value = $(this).val();
          that.updateRecord(record_id, value, multiple);
        });
      },

      async updateRecord(record_id, value, select2_multi) {
        let url;
        let params;
        if (select2_multi) {
          url =
            "extractions_extraction_forms_projects_sections_question_row_column_fields";
          params = {
            extractions_extraction_forms_projects_sections_question_row_column_field:
              {
                question_row_columns_question_row_column_option_ids: [
                  "",
                ].concat(value === null ? [] : value),
              },
          };
        } else {
          url = "records";
          params = {
            record: { name: value },
          };
        }

        const response = await fetch(`/${url}/${record_id}`, {
          method: "PATCH",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
            "X-Requested-With": "XMLHttpRequest",
            "X-CSRF-Token": document.querySelector("[name='csrf-token']")
              .content,
          },
          credentials: "same-origin",
          body: JSON.stringify(params),
        });
        if (response.status != 200) {
          toastr.error("We've encountered an error", null, { timeOut: 1000 });
        } else {
          toastr.success("Saved successfully", null, { timeOut: 1000 });
        }
      },

      async fetch_efps(efps_id) {
        this.mh = null;
        let query_param = "";
        if (efps_id) {
          query_param = `&efps_id=${efps_id}`;
        }
        const response = await fetch(location.href + query_param, {
          method: "GET",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
          },
        });
        const data = await response.json();

        this.efps_sections = data.efps_sections;
        this.mh = data.mh;

        $("#json").empty();
        $("#json").append("<pre>" + JSON.stringify(data, null, 2) + "</pre>");
      },
    }));
  });
</script>
