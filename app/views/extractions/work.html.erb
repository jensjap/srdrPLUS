<div x-data="$store.sharedExtractionStore">
  <%= render 'help_board' %>
  <%= render 'shared/alert_modal' %>
  <% provide(:title, t(".extract_data")) %>

  <div class="ml-9">
    <h5>
      Assigned to <span style="font-weight: bold"><%= @extraction.user.handle %></span>
    </h5>
  </div>

  <div class="ml-9" style='border-color: #bbb6dd; padding: 0; width: auto;'>
    <h6 style='margin: 0;'><%= @extraction.citation.handle.split("\n").join(" - ") %></h6>
    <span>Refman ID: <%= @extraction.citations_project.refman.to_s %></span>
  </div>

  <div class="flex ml-9">
    <div class="flex items-center">Extraction Status:</div>
    <div>
      <button @click="await updateStatus('awaiting_work'); getExtraction();" class="text-xs mx-1 p-1 text-white cursor-pointer bg-orange-600 opacity-40" :class="{ '!opacity-100 border border-black' : extraction.status == 'awaiting_work' }" awaiting_work>awaiting_work</button>
      <button @click="await updateStatus('awaiting_review'); getExtraction();" class="text-xs mx-1 p-1 text-white cursor-pointer bg-blue-800 opacity-40" :class="{ '!opacity-100 border border-black' : extraction.status == 'awaiting_review' }" awaiting_review>awaiting_review</button>
      <button :disabled="!extraction['able_to_review_status?']" @click="await updateStatus('work_returned'); getExtraction();" class="text-xs mx-1 p-1 text-white cursor-not-allowed bg-red-800 opacity-40" :class="{ '!opacity-100 border border-black' : extraction.status == 'work_returned', 'cursor-pointer' : extraction['able_to_review_status?'] }" work_returned>work_returned</button>
      <button :disabled="!extraction['able_to_review_status?']" @click="await updateStatus('work_accepted'); getExtraction();" class="text-xs mx-1 p-1 text-white cursor-not-allowed bg-green-700 opacity-40" :class="{ '!opacity-100 border border-black' : extraction.status == 'work_accepted', 'cursor-pointer' : extraction['able_to_review_status?'] }" work_accepted>work_accepted</button>
    </div>
  </div>

  <div class="ml-9" x-cloak x-show="extraction.status === 'work_returned'">
    Rejection Reason:
    <span class="ml-1 text-red-700 text-sm" x-text="extraction.rejection_reason ? extraction.rejection_reason : 'None Given'"></span>
  </div>

  <div class="flex mr-9 py-1 justify-end">
    <div @click="$store.sharedExtractionStore.help_board = true" class="p-1 bg-srdr-secondary rounded-md text-white text-sm cursor-pointer flex items-center">
      Message Boards
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1" stroke="currentColor" class="size-4 ml-2">
        <path stroke-linecap="round" stroke-linejoin="round" d="M7.5 8.25h9m-9 3H12m-9.75 1.51c0 1.6 1.123 2.994 2.707 3.227 1.129.166 2.27.293 3.423.379.35.026.67.21.865.501L12 21l2.755-4.133a1.14 1.14 0 0 1 .865-.501 48.172 48.172 0 0 0 3.423-.379c1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0 0 12 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018Z" />
      </svg>
    </div>
  </div>

  <% unless @panel_tab_id == 'keyquestions' %>
    <div style='display: none;'>
      <ul class="key-question-selector accordion" data-toggle='' data-accordion='' data-allow-all-closed='true'>
        <li class="accordion-item" data-accordion-item=''>
          <a href="#" class="accordion-title" style="padding: 10px;">Select Key Question(s):</a>
          <div class="accordion-content" data-tab-content=''>
            <div class="grid-y">
              <%= render 'extractions/extractions_key_questions_projects_selections' %>
            </div>
          </div>
        </li>
      </ul>
    </div>
  <% end %>

  <hr class="my-2">

  <div id="preview" class="work">
    <%= render 'extractions/shared/extraction_forms_project_tab_links' %>
    <%= render 'extractions/shared/extraction_forms_project_tab_content' %>
  </div>

  <%= link_to 'Back to Extractions', project_extractions_path(@extraction.project), title: t('manage_extractions') %>
</div>

<script>
  let event = document.createEvent('HTMLEvents');
  event.initEvent('extractionSectionLoaded', true, true);
  document.dispatchEvent(event);
  document.addEventListener('alpine:init', () => {
    const headers = {
      Accept: "application/json",
      "Content-Type": "application/json",
      "X-Requested-With": "XMLHttpRequest",
      "X-CSRF-Token": document.querySelector("[name='csrf-token']").content,
    };
    const url = new URL(window.location.href);
    const extractionId = url.pathname.split('/')[2];

    Alpine.store('sharedExtractionStore', {
      isAlertModalOpen: false,
      alertModalContent: 'Warning! You are about to delete an outcome and any associated data with it. \nThis action cannot be undone. Please confirm to proceed.',
      deleteUrl: '',
      extraction: {},
      help_board: false,

      async init() {
        await this.getExtraction();
        this.toggleHelpBoard();
      },
      toggleHelpBoard() {
        const url = new URL(window.location.href);
        if (url.searchParams.get('help_board') === 'true') {
          this.help_board = true;
        }
      },
      async getExtraction() {
        const response = await fetch(
          `/extractions/${extractionId}`,
          {
            method: "GET",
            headers,
          }
        );
        const data = await response.json();
        this.extraction = data;
      },
      async updateStatus(status) {
        if (this.extraction.status === status) return

        let rejectionReason = null;
        if (status === "work_returned") {
          rejectionReason = prompt('Please enter a rejection reason if any. (Can be left blank)')
          if (rejectionReason === null) return
        }

        const response = await fetch(
          `/extractions/${extractionId}`,
          {
            method: "PATCH",
            headers,
            body: JSON.stringify({
              extraction: {
                status,
                reason: rejectionReason
              },
            }),
          }
        );
        const data = await response.json();
      },
      async askToSubmitForReview(allEefpsDone) {
        if (this.extraction.status === 'awaiting_work' && allEefpsDone && confirm('Would you like to submit this extraction for review?')) {
          await this.updateStatus('awaiting_review');
        }
        if (this.extraction.status === 'awaiting_review' && !allEefpsDone && confirm('Would you like to set the status of this extraction to \'awaiting_work\'?')) {
          await this.updateStatus('awaiting_work');
        }
        this.getExtraction();
      },
      openAlertModal(url) {
        this.deleteUrl = url;
        this.isAlertModalOpen = true;
      },
      closeAlertModal() {
        this.isAlertModalOpen = false;
      },
      modalConfirmAction() {
        fetch(this.deleteUrl, {
          method: 'DELETE',
          headers: {
            'X-CSRF-Token': document.querySelector("meta[name='csrf-token']").getAttribute('content'),
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          credentials: 'include'
        })
          .then(response => {
            if (response.ok || response.status === 204) {
              window.location.reload();
            }
          })
          .catch(error => console.error('Error:', error))
          .finally(() => this.closeAlertModal());
      }
    });
  });
</script>
