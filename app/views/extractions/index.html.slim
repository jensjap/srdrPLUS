#loading-indicator
  #spinner

- provide(:title, 'List of Extractions')
- am_leader = @project.leaders.include? current_user

div class="p-4 lg:p-8" x-data="$store.deleteConfirmation"
  = render 'shared/alert_modal'
  - efp = @project.extraction_forms_projects.first
  div class="flex justify-between"
    h1 class="text-xl font-bold" Extractions
    - if @project.key_questions.present?
      div = link_to 'go to extraction form builder ->', build_extraction_forms_project_path(efp, 'panel-tab': efp.default_section_id)
    - else
      div = link_to 'go to extraction form builder ->', '#', style: 'float: right; font-size: 0.4em;', onClick: "alert('Please add at least one Key Question first')"
  div style="margin-bottom: 10px;"
    - if @project.key_questions.present?
      = link_to new_project_extraction_path, class: 'button create-button create-extraction-button' do
        i.fi-plus>
        = t('.create')
    - else
      = link_to '#', class: 'button create-button create-extraction-button', onClick: "alert('Please add at least one Key Question first')" do
        i.fi-plus>
        = t('.create')

  table.extractions-list
    thead
      tr
        th data-sorting-col="0" width="50px"
        th.table-sortable.sorting data-sorting-col="1" width="200px" Authors
        th.table-sortable.sorting data-sorting-col="2" width="80px" Pub Year
        th.table-sortable.sorting data-sorting-col="3" width="180px"
          | Accession Number (e.g. PubMed ID)
          span data-tooltip="" tabindex="1" title="e.g. Pubmed ID, Cochrane, MBASE, etc."
            | &nbsp;
            i class="fi-info"
        th.table-sortable.sorting data-sorting-col="4" width="160px" RefID
        th.table-sortable.sorting data-sorting-col="5" Title
        th.table-sortable.sorting data-sorting-col="6" width="80px" KQs
        th.table-sortable.sorting data-sorting-col="7" width="200px" Assigned User
        th.table-sortable.sorting data-sorting-col="8" width="50px" Progress
        th width="50px"
        th width="50px"

    tbody
      - if @extractions.blank?
        tr
          td No extractions found.
          td
          td
          td
          td
          td
          td
          td
          td
          td
          td

      - else
        - @extractions.each do |extraction|
          tr
            - if extraction.user.present?
              td data-sort="#{extraction.updated_at.to_i}" = link_to 'Extract Data', work_extraction_path(extraction), style: 'font-weight:bold; text-wrap: nowrap;'
            - else
              td data-sort="#{extraction.updated_at.to_i}" class='text-red-600' style='font-weight:bold; text-wrap: nowrap;' Requires Assigned User
            td title="#{extraction.citation.authors}" = extraction.citation.authors_short
            td = extraction.year
            td = extraction.pmid
            td = extraction.citations_project.refman
            td data-sort="#{extraction.name}"
              div style="overflow: hidden; height: 18px;" = link_to extraction.name, citation_path(extraction.citation, project_id: @project.id)
            td
              - positions_and_names = extraction.selected_key_questions_positions_and_names
              - positions_and_names.each_with_index do |kq, index|
                span data-tooltip="" title="#{kq[:name]}"
                  = kq[:position]
                - if index < positions_and_names.size - 1
                  = ', '
            - if am_leader
              td
                .projects-users-role dropdown-active='false'
                  span.projects-users-role-label data-extraction-id="#{ extraction.id.to_s }"
                    = extraction.user_handle
                  .projects-users-role-select.hide
                    = form_with model: extraction, html: { remote: true } do |e_f|
                      = e_f.select :user_id, @users.map { |user| [user.handle, user.id] }, input_html: { class: "index-extractions-select2" }, selected: extraction.user&.id
            - else
              td = extraction.user_handle

            td data-sort="#{ extraction.progress_meter_width }"
              .success.progress data-allow-html="true" data-tooltip="" title="#{ extraction.tooltip_text }"
                .progress-meter style="width: #{ extraction.progress_meter_width }%;"

            td = link_to 'Reassign', reassign_extraction_extraction_path(extraction)
            td
              - delete_url = extraction_path(extraction)
              a href="#" data-delete-url="#{delete_url}" data-extraction-id="#{extraction.id}" data-extraction-name="#{extraction.name}" class="delete-btn" style='font-weight:bold;color:#cc4b37 !important;'
                = t('destroy')

  div
  - if @project.key_questions.present?
    = link_to new_project_extraction_path, class: 'button create-button create-extraction-button' do
      i.fi-plus>
      = t('.create')
  - else
    = link_to '#', class: 'button create-button create-extraction-button', onClick: "alert('Please add at least one Key Question first')" do
      i.fi-plus>
      = t('.create')

javascript:
  document.addEventListener('alpine:init', () => {
    Alpine.store('deleteConfirmation', {
      isAlertModalOpen: false,
      alertModalContent: '',
      deleteUrl: '',
      openAlertModal(url, extraction_id, extraction_name) {
        this.deleteUrl = url;
        if (extraction_name) {
          this.alertModalContent = `Warning! You are about to delete an Extraction with ID ${extraction_id}: "${extraction_name}" and any associated data with it. \nThis action cannot be undone. Please confirm to proceed.`;
        } else {
          this.alertModalContent = `Warning! You are about to delete an Extraction with ID ${extraction_id} and any associated data with it. \nThis action cannot be undone. Please confirm to proceed.`;
        }
        this.isAlertModalOpen = true;
      },
      closeAlertModal() {
        this.isAlertModalOpen = false;
      },
      modalConfirmAction() {
        fetch(this.deleteUrl, {
          method: 'DELETE',
          headers: {
            'X-CSRF-Token': document.querySelector("meta[name='csrf-token']").getAttribute('content'),
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          credentials: 'include'
        })
          .then(response => {
            if (response.ok || response.status === 204) {
              window.location.reload();
            }
          })
          .catch(error => console.error('Error:', error))
          .finally(() => this.closeAlertModal());
      }
    });
  });
