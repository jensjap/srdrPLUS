div x-data="$store.sharedExtractionStore"
  = render 'help_board'
  = render 'shared/alert_modal'
  - provide(:title, t(".extract_data"))

  div class="ml-9"
    h5
      = "Assigned to "
      span style="font-weight: bold"
        = @extraction.user.handle

  div class="ml-9" style='border-color: #bbb6dd; padding: 0; width: auto;'
    h6 style='margin: 0;'
      = @extraction.citation.handle.split("\n").join(" - ")
    span Refman ID: #{ @extraction.citations_project.refman.to_s }

  div class="flex ml-9 py-1"
    div Extraction Status:
    div
      button @click="await updateStatus('awaiting_work'); getExtraction();" class="text-xs mx-1 p-1 text-white cursor-pointer bg-gray-500" :class="{ 'bg-srdrpurple' : extraction.status == 'awaiting_work' }" awaiting_work
      button @click="await updateStatus('awaiting_review'); getExtraction();" class="text-xs mx-1 p-1 text-white cursor-pointer bg-gray-500" :class="{ 'bg-srdrpurple' : extraction.status == 'awaiting_review' }" awaiting_review
      button :disabled="!extraction['able_to_review_status?']" @click="await updateStatus('work_rejected'); getExtraction();" class="text-xs mx-1 p-1 text-white cursor-not-allowed bg-gray-500" :class="{ 'bg-srdrpurple' : extraction.status == 'work_rejected', 'cursor-pointer' : extraction['able_to_review_status?'] }" work_rejected
      button :disabled="!extraction['able_to_review_status?']" @click="await updateStatus('work_accepted'); getExtraction();" class="text-xs mx-1 p-1 text-white cursor-not-allowed bg-gray-500" :class="{ 'bg-srdrpurple' : extraction.status == 'work_accepted', 'cursor-pointer' : extraction['able_to_review_status?'] }" work_accepted
  div class="flex mr-9 py-1 justify-end"
    div @click="$store.sharedExtractionStore.help_board = true" class="p-2 bg-srdr-secondary rounded-md text-white cursor-pointer flex items-center"
      | Messages
      svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1" stroke="currentColor" class="size-4 ml-2"
        path stroke-linecap="round" stroke-linejoin="round" d="M7.5 8.25h9m-9 3H12m-9.75 1.51c0 1.6 1.123 2.994 2.707 3.227 1.129.166 2.27.293 3.423.379.35.026.67.21.865.501L12 21l2.755-4.133a1.14 1.14 0 0 1 .865-.501 48.172 48.172 0 0 0 3.423-.379c1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0 0 12 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018Z"

  - unless @panel_tab_id == 'keyquestions'
    div style='display: none;'
      ul.key-question-selector class="accordion" data-toggle='' data-accordion='' data-allow-all-closed='true'
        li class="accordion-item" data-accordion-item=''
          a href="#" class="accordion-title" style="padding: 10px;" Select Key Question(s):
          div class="accordion-content" data-tab-content=''
            .grid-y
              = render 'extractions/extractions_key_questions_projects_selections'

  hr.my-2

  #preview.work
    = render 'extractions/shared/extraction_forms_project_tab_links'

    = render 'extractions/shared/extraction_forms_project_tab_content'

  = link_to 'Back to Extractions',
    project_extractions_path(@extraction.project),
    title: t('manage_extractions')

javascript:
  let event = document.createEvent('HTMLEvents');
  event.initEvent('extractionSectionLoaded', true, true);
  document.dispatchEvent(event);
  document.addEventListener('alpine:init', () => {
    const headers = {
      Accept: "application/json",
      "Content-Type": "application/json",
      "X-Requested-With": "XMLHttpRequest",
      "X-CSRF-Token": document.querySelector("[name='csrf-token']").content,
    };
    const url = new URL(window.location.href);
    const extractionId = url.pathname.split('/')[2];

    Alpine.store('sharedExtractionStore', {
      isAlertModalOpen: false,
      alertModalContent: 'Warning! You are about to delete an outcome and any associated data with it. \nThis action cannot be undone. Please confirm to proceed.',
      deleteUrl: '',
      extraction: {},
      help_board: false,

      async init() {
        this.getExtraction();
      },
      async getExtraction() {
        const response = await fetch(
          `/extractions/${extractionId}`,
          {
            method: "GET",
            headers,
          }
        );
        const data = await response.json();
        this.extraction = data;
      },
      async updateStatus(status) {
        const response = await fetch(
          `/extractions/${extractionId}`,
          {
            method: "PATCH",
            headers,
            body: JSON.stringify({
              extraction: {
                status,
              },
            }),
          }
        );
        const data = await response.json();
      },
      async askToSubmitForReview(allEefpsDone) {
        if (this.extraction.status === 'awaiting_work' && allEefpsDone && confirm('Would you like to submit this extraction for review?')) {
          await this.updateStatus('awaiting_review');
        }
        if (this.extraction.status === 'awaiting_review' && !allEefpsDone && confirm('Would you like to set the status of this extraction to \'awaiting_work\'?')) {
          await this.updateStatus('awaiting_work');
        }
        this.getExtraction();
      },
      openAlertModal(url) {
        this.deleteUrl = url;
        this.isAlertModalOpen = true;
      },
      closeAlertModal() {
        this.isAlertModalOpen = false;
      },
      modalConfirmAction() {
        fetch(this.deleteUrl, {
          method: 'DELETE',
          headers: {
            'X-CSRF-Token': document.querySelector("meta[name='csrf-token']").getAttribute('content'),
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          credentials: 'include'
        })
          .then(response => {
            if (response.ok || response.status === 204) {
              window.location.reload();
            }
          })
          .catch(error => console.error('Error:', error))
          .finally(() => this.closeAlertModal());
      }
    });
  });
