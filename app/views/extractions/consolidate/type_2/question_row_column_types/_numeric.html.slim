/ Note: The reason we traverse back up on eefps on the line:
  ```
    extractions_extraction_forms_projects_section: eefps.link_to_type1,
  ```
  is because if we tried to ExtractionsExtractionFormsProjectsSectionsType1.find_or_create_by
  using the current eefps (which is the type2 section, we'd be finding the wrong object. It
  might be better to just use .find_by! since we are assured of the existence of the
  eefps.

/ Note: Numeric will always have 2 question_row_column_fields for every question_row_column. One for the
    special character ~, <, >, ≤, ≥ and another for the numerical value.

.row
  / If user chose to allow additional char then make this input field available.
  - if ActiveModel::Type::Boolean.new.cast(qrc.field_validation_value_for(:additional_char))
    .column.medium-4
      / Special char is one of the following: ~, <, >, ≤, ≥
      - eefps_qrcf_special = ExtractionsExtractionFormsProjectsSectionsQuestionRowColumnField.find_or_create_by!( \
        extractions_extraction_forms_projects_sections_type1: t1.blank? \
        ? nil \
        : ExtractionsExtractionFormsProjectsSectionsType1.find_by!( \
          extractions_extraction_forms_projects_section: eefps.link_to_type1,
              type1: t1),
              extractions_extraction_forms_projects_section: eefps,
              question_row_column_field: qrc.question_row_column_fields.first)

      - record = Record.find_or_create_by!(recordable: eefps_qrcf_special)
      = simple_form_for(record, remote: true, html: { data: { 'abide': '', 'live-validate': true } }) do |f|
        = f.error_notification

        = f.input :name, label: false, disabled: true,
                collection: ['~', '<', '>', '≤', '≥'],
                as: :select,
                input_html: { \
            data: { prereq: "prereq-#{ qrc.class }-#{ qrc.id }" } }
        div id="record-id-#{ record.id.to_s }" class='record-info' style='opacity: 0;' = 'Saved!'

        /.form-actions
          = f.button :submit, 'Save'

  .column.medium-8
    / We handle the creation of the second question_row_column_fields in model/question_row_column :after_save callback.
    /- byebug if qrc.question_row_column_fields.length < 2
    /- qrc.question_row_column_fields.create if qrc.question_row_column_fields.lenght < 2
    - eefps_qrcf = ExtractionsExtractionFormsProjectsSectionsQuestionRowColumnField.find_or_create_by!( \
      extractions_extraction_forms_projects_sections_type1: t1.blank? \
      ? nil \
      : ExtractionsExtractionFormsProjectsSectionsType1.find_by!( \
        extractions_extraction_forms_projects_section: eefps.link_to_type1,
            type1: t1),
            extractions_extraction_forms_projects_section: eefps,
            question_row_column_field: qrc.question_row_column_fields.second)

    - record = Record.find_or_create_by!(recordable: eefps_qrcf)
    = simple_form_for(record, remote: true, html: { data: { 'abide': '', 'live-validate': true } }) do |f|
      = f.error_notification

      = f.input :name, label: false, disabled: true,
              input_html: { \
          data: { prereq: "prereq-#{ qrc.class }-#{ qrc.id }" },
                      min: qrc.field_validation_value_for(:min_value),
                      max: qrc.field_validation_value_for(:max_value) }
      div id="record-id-#{ record.id.to_s }" class='record-info' style='opacity: 0;' = 'Saved!'

      /.form-actions
        = f.button :submit, 'Save'
