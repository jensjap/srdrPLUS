<div class="column row">
  <% eefps_qrcf = @eefps_qrcf_dict[[eefps.id, qrc.question_row_column_fields.first.id, t1&.id].to_s] %>
  <% unless eefps_qrcf %>
    <% eefps_qrcf = ExtractionsExtractionFormsProjectsSectionsQuestionRowColumnField.find_or_create_by(
      extractions_extraction_forms_projects_sections_type1: t1.blank? ? nil : eefps.link_to_type1.extractions_extraction_forms_projects_sections_type1s.select { |el| el.type1_id == t1.id }.first,
      extractions_extraction_forms_projects_section: eefps,
      question_row_column_field: qrc.question_row_column_fields.first
    ) %>
  <% end %>
  <% record = @records_dict[eefps_qrcf.id] %>
  <% unless record %>
    <% record = Record.find_or_create_by(recordable: eefps_qrcf) %>
  <% end %>
  <%= simple_form_for(record, namespace: "record_#{record.id}", remote: true, html: { data: { 'abide': '', 'live-validate': true } }) do |f| %>
    <%= f.error_notification %>
    <%= f.input :name, label: false, required: false, disabled: true, class: 'form-control',
      pattern: ".{0}|.{#{qrc.field_validation_value_for(:min_length)},#{qrc.field_validation_value_for(:max_length)}}",
      data: { prereq: "prereq-#{qrc.class}-#{qrc.id}" },
      input_html: { title: "Constraints: Blank OR between #{qrc.field_validation_value_for(:min_length)} and #{qrc.field_validation_value_for(:max_length)} chars" } %>
    <div class='record-info' style='opacity: 0;'>Saved!</div>
  <% end %>
</div>
