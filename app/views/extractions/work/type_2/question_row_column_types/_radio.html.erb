<div class="column row overlay-parent">
  <% eefps_qrcf = @eefps_qrcf_dict[[eefps.id, qrc.question_row_column_fields.first.id, t1&.id].to_s] %>
  <% unless eefps_qrcf %>
    <% eefps_qrcf = ExtractionsExtractionFormsProjectsSectionsQuestionRowColumnField.find_or_create_by(
      extractions_extraction_forms_projects_sections_type1: t1.blank? ? nil : eefps.link_to_type1.extractions_extraction_forms_projects_sections_type1s.where(type1_id: t1.id).first,
      extractions_extraction_forms_projects_section: eefps,
      question_row_column_field: qrc.question_row_column_fields.first
    ) %>
  <% end %>
  <% record = @records_dict[eefps_qrcf.id] %>
  <% unless record %>
    <% record = Record.find_or_create_by(recordable: eefps_qrcf) %>
  <% end %>
  <% options = [] %>
  <% followups = [] %>
  <% qrc.question_row_columns_question_row_column_options.where(question_row_column_option_id: 1).includes(:followup_field).each do |opt| %>
    <% if opt.followup_field.present? %>
      <% eefpst1 = t1.blank? ? nil : eefps.link_to_type1.extractions_extraction_forms_projects_sections_type1s.where(type1_id: t1.id).first %>
      <% eefps_ff = opt.followup_field.extractions_extraction_forms_projects_sections_followup_fields.includes(:extractions_extraction_forms_projects_sections_type1).where(extractions_extraction_forms_projects_sections_type1: eefpst1).where(extractions_extraction_forms_projects_section_id: eefps.id).first %>
      <% if eefps_ff.blank? %>
        <% eefps_ff = ExtractionsExtractionFormsProjectsSectionsFollowupField.find_or_create_by(followup_field: opt.followup_field, extractions_extraction_forms_projects_section_id: eefps.id, extractions_extraction_forms_projects_sections_type1_id: eefpst1.try(:id)) %>
      <% end %>
      <% followups << ["prereq-#{opt.class}-#{opt.id}", "attach_target_#{eefps_ff.id}", eefps_ff] %>
      <% options << [opt.name, opt.id, { 'data-attach-source': "attach_target_#{eefps_ff.id}", 'data-prereq': "prereq-#{opt.class}-#{opt.id}", 'data-radio-remove-id': record.id }] %>
    <% else %>
      <% options << [opt.name, opt.id, { 'data-prereq': "prereq-#{opt.class}-#{opt.id}", 'data-radio-remove-id': record.id }] %>
    <% end %>
  <% end %>
  <%= simple_form_for(record, namespace: "record_#{record.id}", remote: true, html: { data: { abide: '', 'live-validate': true, prereq: "prereq-#{qrc.class}-#{qrc.id}" } }) do |f| %>
    <%= f.error_notification %>
    <%= f.input :name, label: false, as: :radio_buttons, collection: options, class: 'form-control' %>
    <div id="record-id-<%= record.id %>" class="record-info" style="opacity: 0;">Saved!</div>
  <% end %>
  <div>
    <button type="button" class="button tiny radio-deselector-btn" style="background-color: grey;" data-radio-remove-id="<%= record.id %>">Clear Selection</button>
  </div>
  <%= render 'extractions/shared/type_2/followup_fields', followups: followups %>
</div>
