<div class="column row overlay-parent">
  <% if ActiveModel::Type::Boolean.new.cast(qrc.field_validation_value_for(:additional_char)) %>
    <div class="column medium-4">
      <% eefps_qrcf_special = @eefps_qrcf_dict[[eefps.id, qrc.question_row_column_fields.first.id, t1&.id].to_s] %>
      <% unless eefps_qrcf_special %>
        <% eefps_qrcf_special = ExtractionsExtractionFormsProjectsSectionsQuestionRowColumnField.find_or_create_by!(
          extractions_extraction_forms_projects_sections_type1: t1.blank? ? nil : eefps.link_to_type1.extractions_extraction_forms_projects_sections_type1s.select { |el| el.type1_id == t1.id }.first,
          extractions_extraction_forms_projects_section: eefps,
          question_row_column_field: qrc.question_row_column_fields.first
        ) %>
      <% end %>
      <% record = @records_dict[eefps_qrcf_special.id] %>
      <% unless record %>
        <% record = Record.find_or_create_by(recordable: eefps_qrcf_special) %>
      <% end %>
      <%= simple_form_for(record, url: '/', namespace: "record_#{record.id}", html: { data: { abide: '', 'live-validate': true } }) do |f| %>
        <%= f.error_notification %>
        <%= f.input :name, label: false, disabled: true, collection: ['~', '<', '>', '≤', '≥'], as: :select, input_html: { data: { prereq: "prereq-#{qrc.class}-#{qrc.id}" } } %>
      <% end %>
    </div>
  <% end %>
  <div>
    <% eefps_qrcf = @eefps_qrcf_dict[[eefps.id, qrc.question_row_column_fields.second.id, t1&.id].to_s] %>
    <% unless eefps_qrcf %>
      <% eefps_qrcf = ExtractionsExtractionFormsProjectsSectionsQuestionRowColumnField.find_or_create_by!(
        extractions_extraction_forms_projects_sections_type1: t1.blank? ? nil : eefps.link_to_type1.extractions_extraction_forms_projects_sections_type1s.select { |el| el.type1_id == t1.id }.first,
        extractions_extraction_forms_projects_section: eefps,
        question_row_column_field: qrc.question_row_column_fields.second
      ) %>
    <% end %>
    <% record = @records_dict[eefps_qrcf.id] %>
    <% unless record %>
      <% record = Record.find_or_create_by(recordable: eefps_qrcf) %>
    <% end %>
    <%= simple_form_for(record, url: '/', namespace: "record_#{record.id}", html: { data: { abide: '', 'live-validate': true } }) do |f| %>
      <%= f.error_notification %>
      <%= f.input :name, as: :numeric, label: false, disabled: true, input_html: { data: { prereq: "prereq-#{qrc.class}-#{qrc.id}" }, min: qrc.field_validation_value_for(:min_value), max: qrc.field_validation_value_for(:max_value) } %>
    <% end %>
  </div>
</div>
