<script src="/echarts.min.js"></script>

<div class="flex flex-wrap" x-data="screening_charts">
  <div class="w-full lg:w-1/2 p-1 flex flex-col items-center justify-start">
    <div
      class="h-32 w-full"
      id="accepted-donut"
      @click="donutChart('accepted-donut');"
    ></div>
    <div
      class="h-48 w-full"
      id="accepted-barchart"
      @click="barChart('accepted-barchart');"
    ></div>
    <div
      class="text-xs"
      x-text="ml_model_timestamps[ml_model_timestamp_index]"
    ></div>
    <input
      class="w-full accent-srdrpurple cursor-pointer"
      type="range"
      min="0"
      :max="ml_model_timestamps.length - 1"
      step="1"
      x-model="ml_model_timestamp_index"
      @change="demoChange()"
      @input="demoChange()"
    />
  </div>
  <div class="w-full lg:w-1/2 p-1 flex flex-col items-center justify-start">
    <div
      class="h-32 w-full"
      id="rejected-donut"
      @click="donutChart('rejected-donut');"
    ></div>
    <div
      class="h-48 w-full"
      id="rejected-barchart"
      @click="barChart('rejected-barchart');"
    ></div>
    <div
      class="text-xs"
      x-text="ml_model_timestamps[ml_model_timestamp_index]"
    ></div>
    <input
      class="w-full accent-srdrpurple cursor-pointer"
      type="range"
      min="0"
      :max="ml_model_timestamps.length - 1"
      step="1"
      x-model="ml_model_timestamp_index"
      @change="demoChange()"
      @input="demoChange()"
    />
  </div>
  <div
    class="w-full lg:w-1/2 p-1 bg-purple-50 flex flex-col items-center justify-start rounded-md"
  >
    <div
      class="h-32 w-full"
      id="labels-donut"
      @click="donutChart('labels-donut');"
    ></div>
    <div
      class="h-48 w-full"
      id="labels-barchart"
      @click="barChart('labels-barchart');"
    ></div>
    <div class="p-1 w-full flex items-center justify-around">
      <input
        type="number"
        class="!text-xs !w-1/3 !bg-transparent text-center"
        x-model="currentMinCertainty"
        @change="if (currentMinCertainty == '') {
          currentMinCertainty = oldMinCertainty;
        }
        if (currentMinCertainty < 0) {
          currentMinCertainty = 0;
        }
        if (currentMinCertainty >= currentMaxCertainty) {
          currentMinCertainty = currentMaxCertainty - 1;
        }
        barChart('labels-barchart'); donutChart('labels-donut')"
      />
      <div>to</div>
      <input
        type="number"
        class="!text-xs !w-1/3 !bg-transparent text-center"
        x-model="currentMaxCertainty"
        @change="if (currentMaxCertainty == '') {
          currentMaxCertainty = oldMaxCertainty
        }
        if (currentMaxCertainty > 100) {
          currentMaxCertainty = 100;
        }
        if (currentMaxCertainty <= currentMinCertainty) {
          currentMaxCertainty = currentMinCertainty + 1;
        }
        barChart('labels-barchart'); donutChart('labels-donut')"
      />
    </div>
    <div
      class="text-xs p-1 w-full flex items-center justify-center text-black-700 font-bold"
    >
      % Certainty
    </div>
  </div>
  <div class="w-full lg:w-1/2 p-1 flex flex-col items-center justify-start">
    <table class="h-full text-center">
      <tbody>
        <tr>
          <td class="text-xs font-bold align-middle" rowspan="2"></td>
          <td class="text-xs font-bold align-middle"></td>
          <td
            class="text-xs font-bold align-middle"
            colspan="2"
            style="background: #bbeeee"
          >
            Predicted condition
          </td>
        </tr>
        <tr>
          <td class="text-xs font-bold align-middle bg-gray-200">
            Total population = P + N
          </td>
          <td class="text-xs font-bold align-middle bg-teal-100">
            Positive (PP)
          </td>
          <td class="text-xs font-bold align-middle bg-teal-200">
            Negative (PN)
          </td>
        </tr>
        <tr>
          <td
            class="text-xs font-bold align-middle"
            rowspan="2"
            style="
              vertical-align: middle;
              padding: 0.4em 0.4em 0.2em;
              background-position: 50% 0.4em !important;
              min-width: 0.875em;
              max-width: 0.875em;
              overflow: hidden;
              background: #eeeebb;
            "
          >
            <div
              style="
                -o-writing-mode: vertical-rl;
                -ms-writing-mode: tb-rl;
                writing-mode: tb-rl;
                writing-mode: vertical-rl;
                transform: rotate(180deg);
                display: inline-block;
                padding-left: 1px;
                text-align: center;
              "
            >
              Actual condition
            </div>
          </td>
          <td class="text-xs font-bold align-middle bg-amber-100">
            Positive (P)
          </td>
          <td class="text-xs font-bold align-middle bg-green-100">
            True Positive(TP) #
          </td>
          <td class="text-xs font-bold align-middle bg-red-100">
            False Positive(FN) #
          </td>
        </tr>
        <tr>
          <td class="text-xs font-bold align-middle bg-amber-200">
            Negative (N) #
          </td>
          <td class="text-xs font-bold align-middle bg-red-200">
            False Positive (FP) #
          </td>
          <td class="text-xs font-bold align-middle bg-green-200">
            True Negative (TN) #
          </td>
        </tr>
      </tbody>
    </table>
    <div class="w-full grid grid-cols-3 text-xs">
      <div class="border">TPR: 789</div>
      <div class="border">TNR: 789</div>
      <div class="border">PPV: 789</div>
      <div class="border">NPV: 789</div>
      <div class="border">FNR: 789</div>
      <div class="border">FPR: 789</div>
      <div class="border">FDR: 789</div>
      <div class="border">FOR: 789</div>
      <div class="border">LR+: 789</div>
      <div class="border">LR-: 789</div>
      <div class="border">PT: 789</div>
      <div class="border">TS: 789</div>
    </div>
  </div>
</div>
<script>
  document.addEventListener("alpine:init", () => {
    Alpine.data("screening_charts", () => ({
      oldMinCertainty: 30,
      oldMaxCertainty: 70,
      currentMinCertainty: 30,
      currentMaxCertainty: 70,
      ml_model_timestamps: [],
      ml_model_timestamp_index: 0,

      init() {
        this.renderCharts();
        for (let i = 1; i < 10; i++) {
          this.ml_model_timestamps.push(`2023-01-0${i}`);
        }
        this.ml_model_timestamp_index = this.ml_model_timestamps.length - 1;
      },

      demoChange() {
        this.barChart("accepted-barchart");
        this.donutChart("accepted-donut");
        this.barChart("rejected-barchart");
        this.donutChart("rejected-donut");
        this.barChart("labels-barchart");
        this.donutChart("labels-donut");
      },

      renderCharts() {
        this.donutChart("accepted-donut");
        this.donutChart("rejected-donut");
        this.donutChart("labels-donut");
        this.barChart("accepted-barchart");
        this.barChart("rejected-barchart");
        this.barChart("labels-barchart");
      },

      donutChart(id) {
        const myChart = echarts.init(document.getElementById(id), null, {
          renderer: "svg",
        });
        const option = {
          grid: {
            left: 0,
            top: 0,
            right: 0,
            bottom: 0,
          },
          tooltip: {
            trigger: "item",
          },
          series: [
            {
              type: "pie",
              radius: ["40%", "70%"],
              avoidLabelOverlap: false,
              labelLine: {
                show: false,
              },
              label: {
                show: false,
              },
              data: [
                {
                  value: Math.round(Math.random() * 100),
                  name: "Rejected",
                  itemStyle: {
                    color: `rgba(150, 0, 0, ${
                      id.includes("rejected") ? 1 : 0.2
                    })`,
                  },
                },
                {
                  value: Math.round(Math.random() * 100),
                  name: "Unlabeled",
                  itemStyle: {
                    color: `rgba(100, 100, 100, ${
                      id.includes("labels") ? 1 : 0.2
                    })`,
                  },
                },
                {
                  value: Math.round(Math.random() * 100),
                  name: "Accepted",
                  itemStyle: {
                    color: `rgba(0, 100, 0, ${
                      id.includes("accepted") ? 1 : 0.2
                    })`,
                  },
                },
              ],
            },
          ],
        };

        option && myChart.setOption(option);
        window.addEventListener("resize", () => myChart.resize());
      },

      barChart(id) {
        const myChart = echarts.init(document.getElementById(id), null, {
          renderer: "svg",
        });
        const xAxisData = [0.1, 0.2, 0.4, 0.6, 0.7, 0.9];
        // Specify the configuration items and data for the chart
        const option = {
          grid: {
            left: 50,
            top: 50,
            right: 50,
            bottom: 50,
          },
          tooltip: {},
          xAxis: {
            data: xAxisData,
          },
          yAxis: {},
          series: [
            {
              name: "Labels",
              type: "bar",
              data: [],
            },
          ],
        };

        for (let i = 0; i < 6; i++) {
          let color;
          if (id.includes("accepted")) {
            color = "rgba(0, 100, 0, 1)";
          } else if (id.includes("rejected")) {
            color = "rgba(150, 0, 0, 1)";
          } else if (xAxisData[i] * 100 < this.currentMinCertainty) {
            color = "rgba(150, 0, 0, 1)";
          } else if (
            xAxisData[i] * 100 >= this.currentMinCertainty &&
            xAxisData[i] * 100 < this.currentMaxCertainty
          ) {
            color = "rgba(100, 100, 100, 1)";
          } else {
            color = "rgba(0, 100, 0, 1)";
          }
          option.series[0].data.push({
            value: Math.round(Math.random() * 100),
            itemStyle: { color },
          });
        }

        myChart.setOption(option);
        window.addEventListener("resize", () => myChart.resize());
      },
    }));
  });
</script>
