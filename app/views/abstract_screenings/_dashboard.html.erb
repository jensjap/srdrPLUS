<div x-data="$store.dashboard">
  <div class="sm:flex sm:items-center">
    <div class="sm:flex-auto">
      <h1 class="text-xl font-bold">Project Dashboard</h1>
      <p
        class="mt-2 text-sm text-gray-700"
        x-text="`(Number of Citations: ${$store.dashboard.kpis.count})`"
      ></p>
    </div>
    <div class="mt-4 sm:mt-0 sm:ml-16 sm:flex-none">
      <%= link_to('Export Screening Labels in XLSX',
      "#{project_export_screening_data_path(@project)}", method: :post, class:
      "inline-flex items-center justify-center rounded-md border
      border-transparent bg-srdrpurple px-4 py-2 text-sm font-medium !text-white
      shadow-sm hover:bg-srdrpurple-light focus:outline-none focus:ring-2
      focus:ring-indigo-500 focus:ring-offset-2 sm:w-auto hover:no-underline
      hover:text-white") %>
    </div>
  </div>
  <div id="projectDashboardStackedBar" style="width: 100vw; height: 80px"></div>
  <dl class="mt-5 grid gap-3 grid-cols-1 sm:grid-cols-2 lg:grid-cols-4">
    <div class="px-4 py-5 bg-white shadow rounded-lg lg:p-6">
      <dt class="text-sm font-medium text-gray-500 truncate">
        I. Abstract Screening
        <span
          x-text="`(${$store.dashboard.getAbstractScreeningTotal()})`"
        ></span>
      </dt>
      <dd class="mt-1 font-semibold text-gray-900">
        <div>
          <span x-text="$store.dashboard.kpis.asu"> .. </span>
          <span class="text-xs font-extralight text-gray-500">Unscreened </span
          ><span class="text-xs font-extralight border p-1"> asu</span>
        </div>
        <div>
          <span x-text="$store.dashboard.kpis.asps"> .. </span>
          <span class="text-xs font-extralight text-gray-500"
            >Partially screened </span
          ><span class="text-xs font-extralight bg-slate-200 p-1"> asps</span>
        </div>
        <div>
          <span x-text="$store.dashboard.kpis.asic"> .. </span>
          <span class="text-xs font-extralight text-gray-500">In conflict </span
          ><span class="text-xs font-extralight bg-orange-200 p-1"> asic</span>
        </div>
        <div>
          <span x-text="$store.dashboard.kpis.asa"> .. </span>
          <span class="text-xs font-extralight text-gray-500">Accepted </span>
        </div>
        <div>
          <span x-text="$store.dashboard.kpis.asr"> .. </span>
          <span class="text-xs font-extralight text-gray-500">Rejected </span
          ><span class="text-xs font-extralight bg-red-200 p-1"> asr</span>
        </div>
      </dd>
    </div>

    <div class="px-4 py-5 bg-white shadow rounded-lg lg:p-6">
      <dt class="text-sm font-medium text-gray-500 truncate">
        II. Full-text Screening
        <span
          x-text="`(${$store.dashboard.getFullTextScreeningTotal()})`"
        ></span>
      </dt>
      <dd class="mt-1 font-semibold text-gray-900">
        <div>
          <span x-text="$store.dashboard.kpis.fsu"> .. </span>
          <span class="text-xs font-extralight text-gray-500">Unscreened </span
          ><span class="text-xs font-extralight border p-1"> fsu</span>
        </div>
        <div>
          <span x-text="$store.dashboard.kpis.fsps"> .. </span>
          <span class="text-xs font-extralight text-gray-500"
            >Partially screened
          </span>
          <span class="text-xs font-extralight bg-slate-200 p-1"> fsps</span>
        </div>
        <div>
          <span x-text="$store.dashboard.kpis.fsic"> .. </span>
          <span class="text-xs font-extralight text-gray-500">In conflict </span
          ><span class="text-xs font-extralight bg-orange-200 p-1"> fsic</span>
        </div>
        <div>
          <span x-text="$store.dashboard.kpis.fsa"> .. </span>
          <span class="text-xs font-extralight text-gray-500">Accepted </span>
        </div>
        <div>
          <span x-text="$store.dashboard.kpis.fsr"> .. </span>
          <span class="text-xs font-extralight text-gray-500">Rejected </span
          ><span class="text-xs font-extralight bg-red-200 p-1"> fsr</span>
        </div>
      </dd>
    </div>

    <div class="px-4 py-5 bg-white shadow rounded-lg lg:p-6">
      <dt class="text-sm font-medium text-gray-500 truncate">
        III. Extraction
        <span
          x-text="`(${$store.dashboard.getFullTextExtractionTotal()})`"
        ></span>
      </dt>
      <dd class="mt-1 font-semibold text-gray-900">
        <div>
          <div>
            <span x-text="$store.dashboard.kpis.ene"> .. </span>
            <span class="text-xs font-extralight text-gray-500"
              >Need extraction </span
            ><span class="text-xs font-extralight border p-1"> ene</span>
          </div>
          <div>
            <span x-text="$store.dashboard.kpis.eip"> .. </span>
            <span class="text-xs font-extralight text-gray-500"
              >In progress
            </span>
            <span class="text-xs font-extralight bg-slate-200 p-1"> eip</span>
          </div>
          <div>
            <span x-text="$store.dashboard.kpis.er"> .. </span>
            <span class="text-xs font-extralight text-gray-500">Rejected </span
            ><span class="text-xs font-extralight bg-red-200 p-1"> er</span>
          </div>
          <div>
            <span x-text="$store.dashboard.kpis.ec"> .. </span>
            <span class="text-xs font-extralight text-gray-500">Complete </span
            ><span class="text-xs font-extralight bg-green-200 p-1"> ec</span>
          </div>
        </div>
      </dd>
    </div>

    <div class="px-4 py-5 bg-white shadow rounded-lg lg:p-6">
      <dt class="text-sm font-medium text-gray-500 truncate">
        IV. Consolidation
        <span x-text="`(${$store.dashboard.getConsolidationTotal()})`"></span>
      </dt>
      <dd class="mt-1 font-semibold text-gray-900">
        <div>
          <div>
            <span x-text="$store.dashboard.kpis.cnc"> .. </span>
            <span class="text-xs font-extralight text-gray-500"
              >Need consolidation </span
            ><span class="text-xs font-extralight border p-1"> cnc</span>
          </div>
          <div>
            <span x-text="$store.dashboard.kpis.cip"> .. </span>
            <span class="text-xs font-extralight text-gray-500"
              >In progress
            </span>
            <span class="text-xs font-extralight bg-slate-200 p-1"> cip</span>
          </div>
          <div>
            <span x-text="$store.dashboard.kpis.cr"> .. </span>
            <span class="text-xs font-extralight text-gray-500">Rejected </span
            ><span class="text-xs font-extralight bg-red-200 p-1"> cr</span>
          </div>
          <div>
            <span x-text="$store.dashboard.kpis.cc"> .. </span>
            <span class="text-xs font-extralight text-gray-500">Complete </span
            ><span class="text-xs font-extralight bg-green-200 p-1"> cc</span>
          </div>
        </div>
      </dd>
    </div>
  </dl>
</div>

<script>
  document.addEventListener("alpine:init", () => {
    Alpine.store("dashboard", {
      kpis: {
        count: "..",
        asu: "..",
        asps: "..",
        asic: "..",
        asa: "..",
        asr: "..",
        fsu: "..",
        fsps: "..",
        fsic: "..",
        fsa: "..",
        fsr: "..",
        ene: "..",
        eip: "..",
        er: "..",
        ec: "..",
        cnc: "..",
        cip: "..",
        cr: "..",
        cc: "..",
      },

      init() {
        this.fetch_kpis();
      },

      async fetch_kpis() {
        const response = await fetch("/projects/<%= @project.id %>/kpis", {
          method: "GET",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
          },
        });
        this.kpis = await response.json();
      },

      getAbstractScreeningTotal() {
        return (
          (parseInt(this.kpis.asu) || 0) +
          (parseInt(this.kpis.asps) || 0) +
          (parseInt(this.kpis.asic) || 0) +
          (parseInt(this.kpis.asa) || 0) +
          (parseInt(this.kpis.asr) || 0)
        );
      },
      getFullTextScreeningTotal() {
        return (
          (parseInt(this.kpis.fsu) || 0) +
          (parseInt(this.kpis.fsps) || 0) +
          (parseInt(this.kpis.fsic) || 0) +
          (parseInt(this.kpis.fsa) || 0) +
          (parseInt(this.kpis.fsr) || 0)
        );
      },
      getFullTextExtractionTotal() {
        return (
          (parseInt(this.kpis.ene) || 0) +
          (parseInt(this.kpis.eip) || 0) +
          (parseInt(this.kpis.er) || 0) +
          (parseInt(this.kpis.ec) || 0)
        );
      },
      getConsolidationTotal() {
        return (
          (parseInt(this.kpis.cnc) || 0) +
          (parseInt(this.kpis.cip) || 0) +
          (parseInt(this.kpis.cr) || 0) +
          (parseInt(this.kpis.cc) || 0)
        );
      },
    });
  });

  document.addEventListener("alpine:initialized", () => {
    Alpine.store("dashboard").$watch("kpis", (a, b) => {
      if (a != b) {
        var chartDom = document.getElementById("projectDashboardStackedBar");
        var stackedBarChart = echarts.init(chartDom);
        var option;
        const dashboard = Alpine.store("dashboard");
        const as =
          dashboard.getAbstractScreeningTotal() -
          dashboard.kpis.asa -
          dashboard.kpis.asr;
        const fs =
          dashboard.getFullTextScreeningTotal() -
          dashboard.kpis.fsa -
          dashboard.kpis.fsr;
        const extraction =
          dashboard.getFullTextExtractionTotal() -
          dashboard.kpis.er -
          dashboard.kpis.ec;
        const consolidation =
          dashboard.getConsolidationTotal() -
          dashboard.kpis.cr -
          dashboard.kpis.cc;
        const consolidationComplete = dashboard.kpis.cc;
        const rawData = [
          [as],
          [fs],
          [extraction],
          [consolidation],
          [consolidationComplete],
        ];
        const totalData = [];
        for (let i = 0; i < rawData[0].length; ++i) {
          let sum = 0;
          for (let j = 0; j < rawData.length; ++j) {
            sum += rawData[j][i];
          }
          totalData.push(sum);
        }
        const grid = {
          left: 60,
          right: 80,
          top: 30,
          bottom: 30,
        };
        const dataOptions = [
          ["Abstract Screening", "#E5D9B6", as],
          ["Full-text Screening", "#A4BE7B", fs],
          ["Extraction", "#5F8D4E", extraction],
          ["Consolidation", "#285430", consolidation],
          ["Consolidation Complete", "#00712D", consolidationComplete],
        ];
        const series = dataOptions.map(([name, color, total], seriesIndex) => {
          return {
            name,
            type: "bar",
            stack: "total",
            barWidth: "100%",
            label: {
              show: true,
              formatter: (params) => Math.round(params.value * 1000) / 10 + "%",
            },
            data: rawData[seriesIndex].map((d, dataIndex) =>
              totalData[dataIndex] <= 0 ? 0 : d / totalData[dataIndex]
            ),
            itemStyle: {
              color,
            },
          };
        });
        option = {
          tooltip: {
            trigger: "axis",
            axisPointer: {
              type: "shadow",
            },
            formatter: (params) => {
              return params
                .map((dataPoint, index) => {
                  const total = dataPoint.value * dashboard.kpis.count;
                  return `<div style="border-radius: 9999px; background: ${
                    dataPoint.color
                  }; padding: 0.25rem;"></div>${dataPoint.seriesName}: ${
                    dataOptions[index][2]
                  } (${Math.round(dataPoint.value * 10000) / 100}%)`;
                })
                .join("<br />");
            },
          },
          legend: {
            selectedMode: true,
          },
          grid,
          xAxis: [
            {
              type: "value",
              axisLabel: {
                formatter: (value) => `${value * 100}%`,
              },
            },
          ],
          yAxis: {
            type: "category",
            data: ["Citations"],
          },
          series,
        };

        stackedBarChart.setOption(option);
      }
    });
  });
</script>
