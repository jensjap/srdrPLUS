<div class="p-4 lg:p-8" x-data="abstract_screenings_index">
  <!-- prettier-ignore -->
  <%= render 'reasons_and_tags_modal' %>
  <%= render 'abstract_screenings/screen/add_reasoning' %>
  <div class="sm:flex sm:items-center">
    <div class="sm:flex-auto">
      <h1 class="text-xl font-bold">Abstract Screenings</h1>
      <p class="mt-2 text-sm text-gray-700">
        Setup an abstract screening process for your project members and pool of
        citations
      </p>
    </div>
    <div class="mt-4 flex flex-col space-y-2">
      <!-- prettier-ignore -->
      <%= link_to('Create New Screening',
      new_project_abstract_screening_path(@project), class: "inline-flex
      items-center justify-center rounded-md border border-transparent
      bg-srdrpurple px-4 py-2 text-sm font-medium text-white shadow-sm
      hover:bg-srdrpurple-light focus:outline-none focus:ring-2
      focus:ring-indigo-500 focus:ring-offset-2 sm:w-auto hover:no-underline
      hover:text-white focus:no-underline focus:text-white") %>
      <button
        class="cursor-pointer rounded-md border border-transparent bg-srdrpurple px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-srdrpurple-light focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 hover:no-underline hover:text-white focus:no-underline focus:text-white"
        @click="reasons_tags_modal = true"
      >
        Configure Reasons and Tags
      </button>
    </div>
  </div>
  <div class="px-4 sm:px-6 lg:px-8">
    <div class="mt-8 flex flex-col">
      <div class="-my-2 -mx-4 overflow-x-auto sm:-mx-6 lg:-mx-8">
        <div class="inline-block min-w-full py-2 align-middle">
          <div
            class="overflow-hidden shadow-sm ring-1 ring-black ring-opacity-5"
          >
            <table
              class="w-full table-auto divide-y divide-gray-300 overflow-x-auto whitespace-nowrap"
            >
              <thead class="bg-gray-50">
                <tr>
                  <th
                    scope="col"
                    class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6 lg:pl-8"
                  >
                    Type
                  </th>
                  <th
                    scope="col"
                    class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
                  >
                    Options
                  </th>
                  <th
                    scope="col"
                    class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
                  >
                    Participant (No. of Labels)
                  </th>
                  <th
                    scope="col"
                    class="relative py-3.5 pl-3 pr-4 sm:pr-6 lg:pr-8"
                  >
                    <span class="sr-only">Actions</span>
                  </th>
                </tr>
              </thead>
              <tbody class="divide-y divide-gray-200 bg-white">
                <% if @abstract_screenings.empty? %>
                <tr>
                  <td>No abstract screenings yet.</td>
                </tr>
                <% end %>
                <!-- prettier-ignore -->
                <% @abstract_screenings.each do |as| %>
                <tr>
                  <td
                    class="pl-4 pr-3 text-sm font-medium text-gray-500 sm:pl-6 lg:pl-8"
                  >
                    <!-- prettier-ignore -->
                    <%= as.abstract_screening_type %>
                    <% if AbstractScreening::NON_PERPETUAL.include?(as.abstract_screening_type) %>
                    <div>
                      No. of citations per user: <%= as.no_of_citations %>
                    </div>
                    <% end %>
                  </td>
                  <td class="px-3 text-sm text-gray-500">
                    <div class="flex justify-between">
                      <div>Exclusive users:</div>
                      <div><%= as.exclusive_users %></div>
                    </div>
                    <div class="flex justify-between">
                      <div>Hide author:</div>
                      <div><%= as.hide_author %></div>
                    </div>
                    <div class="flex justify-between">
                      <div>Hide journal:</div>
                      <div><%= as.hide_journal %></div>
                    </div>
                    <div class="flex justify-between">
                      <div>Tags required for:</div>
                      <div><%= as.tag_options.join(', ') %></div>
                    </div>
                    <div class="flex justify-between">
                      <div>Reasons required for:</div>
                      <div><%= as.reason_options.join(', ') %></div>
                    </div>
                    <div class="flex justify-between">
                      <div>Notes required for:</div>
                      <div><%= as.note_options.join(', ') %></div>
                    </div>
                  </td>
                  <td class="px-3 text-sm text-gray-500">
                    <!-- prettier-ignore -->
                    <% users = as.abstract_screening_results.includes(user: :profile).map(&:user) %>
                    <% users += as.users.to_a if as.exclusive_users %>
                    <% users.uniq.each do |user| %>
                    <!-- prettier-ignore -->
                    <div><%= user.handle %> (<%= AbstractScreeningResult.where(user:, abstract_screening: as, privileged: false).where("label IS NOT NULL").count %>)</div>
                    <% end %>
                  </td>

                  <td class="flex flex-col items-center">
                    <% if @project.leaders.include?(current_user) ||
                    !as.exclusive_users || as.users.include?(current_user) %>
                    <!-- prettier-ignore -->
                    <% if AbstractScreeningService.find_citation_id(as, current_user) %>
                      <%= link_to('Continue Screening',
                        abstract_screening_screen_path(as),
                        class: "focus:no-underline focus:text-white w-full items-center justify-center rounded-md border border-transparent bg-srdrpurple px-4 py-2 my-1 text-center text-sm font-medium text-white shadow-sm hover:bg-srdrpurple-light focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 hover:no-underline hover:text-white")
                      %>
                    <% else %>
                    <button
                      class="w-full cursor-not-allowed items-center justify-center rounded-md border border-transparent bg-purple-900 opacity-80 px-4 py-2 my-1 text-center text-sm font-medium text-white shadow-sm hover:no-underline hover:text-white"
                    >
                      Nothing Left to Screen
                    </button>
                    <% end %>
                    <!-- prettier-ignore -->
                    <% if ProjectsUser.find_by(user: current_user, project: @project).project_leader? || ProjectsUser.find_by(user: current_user, project: @project).project_consolidator? %>
                    <!-- prettier-ignore -->
                    <% if AbstractScreeningService.find_asr_id_to_be_resolved(as, current_user, false) %>
                    <div class="w-full flex space-x-2">
                      <!-- prettier-ignore -->
                      <%= link_to(abstract_screening_screen_path(as,
                      resolution_mode: true), class: "w-full items-center
                      justify-center rounded-md border border-transparent
                      bg-srdrpurple px-4 py-2 my-1 text-center text-sm
                      font-medium text-white shadow-sm hover:bg-srdrpurple-light
                      focus:outline-none focus:ring-2 focus:ring-indigo-500
                      focus:ring-offset-2 hover:no-underline hover:text-white focus:no-underline focus:text-white") do %>
                        Resolve Conflicts (<%= AbstractScreeningService.asr_in_asic_count(as) %>)
                      <% end %>
                    </div>
                    <% else %>
                    <button
                      class="w-full cursor-not-allowed items-center justify-center rounded-md border border-transparent bg-purple-900 opacity-80 px-4 py-2 my-1 text-center text-sm font-medium text-white shadow-sm hover:no-underline hover:text-white"
                    >
                      Nothing to Resolve
                    </button>
                    <% end %>
                    <!-- prettier-ignore -->
                    <% end %>
                    <!-- prettier-ignore -->
                    <%= link_to('Show Results',
                      abstract_screening_path(as), class: "w-full
                      items-center justify-center rounded-md border
                      border-transparent bg-srdrpurple px-4 py-2 my-1
                      text-center text-sm font-medium text-white shadow-sm
                      hover:bg-srdrpurple-light focus:outline-none focus:ring-2
                      focus:ring-indigo-500 focus:ring-offset-2
                      hover:no-underline hover:text-white focus:no-underline focus:text-white") %>
                    <!-- prettier-ignore -->
                    <% if @project.leaders.include?(current_user) %>
                    <%= link_to('Settings', edit_abstract_screening_path(as),
                      class: "w-full items-center justify-center
                      rounded-md border border-transparent bg-srdrpurple px-4
                      py-2 my-1 text-center text-sm font-medium text-white
                      shadow-sm hover:bg-srdrpurple-light focus:outline-none
                      focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2
                      hover:no-underline hover:text-white focus:no-underline focus:text-white") %>
                    <% end %>
                  </td>
                </tr>
                <% end %> <% end %>
              </tbody>
            </table>
          </div>
        </div>
        <%= paginate(@abstract_screenings, theme: 'foundation') %>
      </div>
    </div>
  </div>
</div>
<script>
  document.addEventListener("alpine:init", () => {
    const headers = {
      Accept: "application/json",
      "Content-Type": "application/json",
      "X-Requested-With": "XMLHttpRequest",
      "X-CSRF-Token": document.querySelector("[name='csrf-token']").content,
    };
    Alpine.data("abstract_screenings_index", () => ({
      reasons_tags_modal: false,
      addReasonModal: { on: false, type: "", action: "" },
      newCustomValue: "",
      updateCustomId: null,
      custom_reasons: [],
      custom_tags: [],
      project_id: null,

      async init() {
        this.project_id = <%= @project.id %>;
        this.fetchReasons();
        this.fetchTags();
      },

      async fetchReasons() {
        const response = await fetch(
          `/projects/${this.project_id}/projects_reasons?screening_type=abstract`,
          {
            method: "GET",
            headers,
          }
        );
        const data = await response.json();
        this.custom_reasons = data;
      },

      async fetchTags() {
        const response = await fetch(
          "/projects/<%= @project.id %>/projects_tags?screening_type=abstract",
          {
            method: "GET",
            headers,
          }
        );
        const data = await response.json();
        this.custom_tags = data;
      },

      invalidCustomValue() {
        if (this.newCustomValue == "") {
          toastr.error("This field cannot be empty.");
          return true;
        }

        if (
          this.addReasonModal.type == "custom_reasons" &&
          this["custom_reasons"].some(
            (custom_reason) =>
              custom_reason.name == this.newCustomValue && !!custom_reason.id
          )
        ) {
          toastr.error("This value has already been taken.");
          return true;
        }

        if (
          this.addReasonModal.type == "custom_tags" &&
          this["custom_tags"].some(
            (custom_tag) =>
              custom_tag.name == this.newCustomValue && !!custom_tag.id
          )
        ) {
          toastr.error("This value has already been taken.");
          return true;
        }

        return false;
      },

      async createCustomValue() {
        let url;
        if (this.addReasonModal.type == "custom_reasons") {
          url = `/projects/${this.project_id}/projects_reasons?screening_type=abstract`;
        } else if (this.addReasonModal.type == "custom_tags") {
          url = `/projects/${this.project_id}/projects_tags?screening_type=abstract`;
        }
        const response = await fetch(url, {
          method: "POST",
          headers,
          body: JSON.stringify({
            name: this.newCustomValue.trim(),
          }),
        });
        await response.json();
        await this.fetchReasons();
        await this.fetchTags();
        this.addReasonModal.on = false;
        this.newCustomValue = "";
      },

      async updateCustomValue(type, values) {
        const id = values.id;
        const newCustomValue = values.newCustomValue || false;
        let url;
        if (type == "custom_reasons") {
          url = `/projects_reasons/${id}`;
        } else if (type == "custom_tags") {
          url = `/projects_tags/${id}`;
        }
        const response = await fetch(url, {
          method: "PATCH",
          headers,
          body: JSON.stringify({
            newCustomValue,
          }),
        });
        await response.json();
        await this.fetchReasons();
        await this.fetchTags();
        this.addReasonModal.on = false;
        this.newCustomValue = "";
      },

      async updateOrderings(dragPos, dropPos, orderableKey, table) {
        const temp = this[orderableKey][dropPos];
        this[orderableKey][dropPos] = this[orderableKey][dragPos];
        this[orderableKey][dragPos] = temp;
        const tempOrderableElements = this[orderableKey];
        this[orderableKey] = [];
        this.$nextTick(() => {
          this[orderableKey] = tempOrderableElements;
          const orderings = {};
          tempOrderableElements.forEach(
            (oe, index) => (orderings[index] = { id: oe.id, table })
          );
          fetch("/api/v1/orderings/update_positions", {
            method: "PATCH",
            headers,
            body: JSON.stringify({ orderings }),
          });
          this[orderableKey].forEach((el, index) => (el.pos = index + 1));
        });
      },

      async deleteCustomValue(type, index) {
        const id = this[type][index].id;
        if (
          confirm(
            `Would you like to delete "${this[type][index].name}" as a custom choice?`
          )
        ) {
          let url;
          if (type == "custom_reasons") {
            url = `/projects_reasons/${id}`;
          } else if (type == "custom_tags") {
            url = `/projects_tags/${id}`;
          }
          const response = await fetch(url, {
            method: "DELETE",
            headers,
          });
          await response.json();
          await this.fetchReasons();
          await this.fetchTags();
        }
      },
    }));
  });
</script>
