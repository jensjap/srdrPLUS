<div x-data="type_2_question_list">
  <%= render 'shared/alert_modal' %>
  <div
    class="bg-blue-800 text-white text-sm rounded-md p-1 cursor-pointer text-center mt-2 w-32"
    @click="preview_modal = true; fetchPreviewContent();"
  >
    Preview Section
  </div>
  <hr />
  <div
    @click="createQuestion()"
    class="bg-srdrpurple text-white text-sm rounded-md p-1 cursor-pointer text-center mt-2 w-32"
  >
    Add Question
  </div>
  <div class="flex flex-col gap-y-2 my-2">
    <template
      x-for="(question, question_index) in questions"
      :key="question.id"
    >
      <div class="bg-gray-100 p-2 rounded-md">
        <div class="mb-1">
          <div class="flex">
            <div class="m-2 mr-0">Position</div>
            <select
              class="m-2 pl-2 w-auto"
              @change="updateOrderings(question_index, $el.value - 1, 'questions')"
            >
              <template x-for="(q, q_index) in questions" :key="q.id">
                <option
                  :selected="q_index == question_index"
                  :value="q_index + 1"
                  x-text="q_index + 1"
                ></option>
              </template>
            </select>
            <div class="flex space-x-4 m-2">
              <div
                class="flex cursor-pointer hover:underline"
                @click="dependencies_modal = true; updateDependenciesTable(question.id);"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke-width="1.5"
                  stroke="currentColor"
                  class="w-5 h-5 cursor-pointer"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="M13.19 8.688a4.5 4.5 0 011.242 7.244l-4.5 4.5a4.5 4.5 0 01-6.364-6.364l1.757-1.757m13.35-.622l1.757-1.757a4.5 4.5 0 00-6.364-6.364l-4.5 4.5a4.5 4.5 0 001.242 7.244"
                  />
                </svg>
                <span>Dependencies</span>
              </div>
              <div
                class="flex cursor-pointer hover:underline"
                @click="createDuplicateQuestion(question.id)"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke-width="1.5"
                  stroke="currentColor"
                  class="w-5 h-5 cursor-pointer"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="M15.75 17.25v3.375c0 .621-.504 1.125-1.125 1.125h-9.75a1.125 1.125 0 01-1.125-1.125V7.875c0-.621.504-1.125 1.125-1.125H6.75a9.06 9.06 0 011.5.124m7.5 10.376h3.375c.621 0 1.125-.504 1.125-1.125V11.25c0-4.46-3.243-8.161-7.5-8.876a9.06 9.06 0 00-1.5-.124H9.375c-.621 0-1.125.504-1.125 1.125v3.5m7.5 10.375H9.375a1.125 1.125 0 01-1.125-1.125v-9.25m12 6.625v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5a3.375 3.375 0 00-3.375-3.375H9.75"
                  />
                </svg>
                <span>Duplicate</span>
              </div>
              <div
                @click="showAlertModal(`/questions/${question.id}`)"
                class="flex cursor-pointer hover:underline"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke-width="1.5"
                  stroke="currentColor"
                  class="w-5 h-5 cursor-pointer"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"
                  />
                </svg>
                <span>Remove</span>
              </div>
            </div>
          </div>
          <div class="bg-gray-100 p-1 rounded-md">
            <input
              placeholder="Question text"
              class="!text-base !px-1"
              @input.debounce.500ms="updateQuestion(question, { name: $el.value })"
              x-model="question.name"
              type="text"
            />
          </div>
          <div class="bg-gray-100 p-1 rounded-md">
            <input
              placeholder="Question description"
              class="!text-base !px-1"
              @input.debounce.500ms="updateQuestion(question, { description: $el.value })"
              x-model="question.description"
              type="text"
            />
          </div>
        </div>

        <div class="overflow-x-auto">
          <table class="h-0 w-0 table-auto border-separate border-spacing-1">
            <thead>
              <tr>
                <td class="bg-white"></td>
                <template
                  x-for="(column, column_index) in question.columns"
                  :key="column.id"
                >
                  <th>
                    <div class="flex justify-center items-center">
                      <input
                        placeholder="Column header"
                        class="!text-xs p-2 w-auto grow whitespace-nowrap text-center"
                        @input.debounce.500ms="updateColumn(column, { name: $el.value })"
                        x-model="question.columns[column_index].name"
                        type="text"
                      />
                      <div
                        @click="showAlertModal(`/question_row_columns/${column.id}`)"
                        class="text-red-900 cursor-pointer p-2 border-l border-gray-300 hover:bg-red-100"
                      >
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke-width="1.5"
                          stroke="currentColor"
                          class="w-4 h-4"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"
                          />
                        </svg>
                      </div>
                    </div>
                  </th>
                </template>
                <th
                  class="whitespace-nowrap cursor-pointer flex justify-between items-center h-full"
                  @click="addColumn(question.rows[0])"
                >
                  <div class="p-2">Click to add column</div>
                </th>
              </tr>
            </thead>
            <tbody>
              <template
                x-for="(row, row_index) in (question.rows)"
                :key="row.id"
              >
                <tr>
                  <th>
                    <div class="h-full flex justify-center items-center">
                      <input
                        placeholder="Row header"
                        class="!text-xs p-2 w-auto grow whitespace-nowrap text-center"
                        @input.debounce.500ms="updateRow(row, { name: $el.value })"
                        x-model="question.rows[row_index].name"
                        type="text"
                      />
                      <div class="h-full border-l border-gray-300">
                        <div
                          class="text-red-900 cursor-pointer hover:bg-red-100 p-2"
                          @click="showAlertModal(`/question_rows/${row.id}`)"
                        >
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke-width="1.5"
                            stroke="currentColor"
                            class="w-4 h-4"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"
                            />
                          </svg>
                        </div>
                        <div
                          class="text-green-900 cursor-pointer hover:bg-green-100 p-2"
                          @click="duplicateRow(row)"
                        >
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke-width="1.5"
                            stroke="currentColor"
                            class="w-4 h-4"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              d="M15.75 17.25v3.375c0 .621-.504 1.125-1.125 1.125h-9.75a1.125 1.125 0 0 1-1.125-1.125V7.875c0-.621.504-1.125 1.125-1.125H6.75a9.06 9.06 0 0 1 1.5.124m7.5 10.376h3.375c.621 0 1.125-.504 1.125-1.125V11.25c0-4.46-3.243-8.161-7.5-8.876a9.06 9.06 0 0 0-1.5-.124H9.375c-.621 0-1.125.504-1.125 1.125v3.5m7.5 10.375H9.375a1.125 1.125 0 0 1-1.125-1.125v-9.25m12 6.625v-1.875a3.375 3.375 0 0 0-3.375-3.375h-1.5a1.125 1.125 0 0 1-1.125-1.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H9.75"
                            />
                          </svg>
                        </div>
                      </div>
                    </div>
                  </th>

                  <template
                    x-for="(column, column_index) in question.columns"
                    :key="column.id"
                  >
                    <td>
                      <template
                        x-if="question.cells[row_index] !== undefined && question.cells[row_index][column_index] !== undefined && (question.cells[row_index][column_index] !== undefined || question.cells[row_index][column_index] !== null)"
                      >
                        <div
                          class="flex justify-center items-stretch h-full"
                          style="min-width: 0"
                        >
                          <div class="p-2 grow">
                            <template
                              x-if="question.cells[row_index][column_index]?.cell_type === 'text'"
                            >
                              <div>
                                <div
                                  class="whitespace-nowrap border-b-2 border-gray-300"
                                >
                                  Text Field
                                </div>
                                <label class="whitespace-nowrap"
                                  >Min character length
                                  <input
                                    name="min_length"
                                    type="number"
                                    x-model="question.cells[row_index][column_index].min_length.name"
                                    x-on:change.debounce.500ms="updateCellOption(question.cells[row_index][column_index].min_length.id, { name: $el.value })"
                                /></label>
                                <label class="whitespace-nowrap"
                                  >Max character length
                                  <input
                                    name="max_length"
                                    type="number"
                                    x-model="question.cells[row_index][column_index].max_length.name"
                                    x-on:change.debounce.500ms="updateCellOption(question.cells[row_index][column_index].max_length.id, { name: $el.value })"
                                /></label>
                              </div>
                            </template>
                            <template
                              x-if="question.cells[row_index][column_index]?.cell_type === 'numeric'"
                            >
                              <div>
                                <div
                                  class="whitespace-nowrap border-b-2 border-gray-300"
                                >
                                  Numeric Field
                                </div>
                                <div class="flex justify-between items-center">
                                  <label class="whitespace-nowrap"
                                    >Allow ~, <, >, ≤, ≥
                                    <input
                                      name="additional_char"
                                      type="checkbox"
                                      class="!m-0 cursor-pointer"
                                      :checked="question.cells[row_index][column_index].additional_char.name === 't'"
                                      x-model="question.cells[row_index][column_index].additional_char.name"
                                      @click="updateCellOption(question.cells[row_index][column_index].additional_char.id, { name: $el.checked })"
                                  /></label>
                                </div>
                                <label
                                  >Min value allowed
                                  <input
                                    name="min_value"
                                    type="number"
                                    x-model="question.cells[row_index][column_index].min_value.name"
                                    x-on:change.debounce.500ms="updateCellOption(question.cells[row_index][column_index].min_value.id, { name: $el.value })"
                                /></label>
                                <label
                                  >Max value allowed
                                  <input
                                    name="max_value"
                                    type="number"
                                    x-model="question.cells[row_index][column_index].max_value.name"
                                    x-on:change.debounce.500ms="updateCellOption(question.cells[row_index][column_index].max_value.id, { name: $el.value })"
                                /></label>
                              </div>
                            </template>
                            <template
                              x-if="question.cells[row_index][column_index]?.cell_type === 'checkbox'"
                            >
                              <div class="h-full flex flex-col justify-between">
                                <div
                                  class="whitespace-nowrap border-b-2 border-gray-300"
                                >
                                  Checkbox (multi-choice)
                                </div>
                                <div
                                  class="grow border-b-2 border-gray-300 whitespace-nowrap min-h-[96px]"
                                >
                                  <template
                                    x-for="(option, option_index) in question.cells[row_index][column_index].answer_choice"
                                    :key="option.id"
                                    ><div
                                      class="flex justify-between items-center"
                                    >
                                      <input
                                        class="min-w-[3rem] border"
                                        :value="option.name"
                                        @input.debounce.500ms="updateQRCQRCO(option.id, { name: $el.value })"
                                      />
                                      <div
                                        class="flex justify-center items-center mx-2 space-x-2"
                                      >
                                        <label
                                          class="cursor-pointer text-gray-700 text-xs"
                                          >with follow-up
                                          <input
                                            class="!m-0 cursor-pointer"
                                            type="checkbox"
                                            x-model="option.followup_field.value"
                                            x-on:change="updateFollowupField(option.id, option.followup_field.id, $el.checked)"
                                        /></label>
                                        <select
                                          class="w-auto pl-2 !text-xs"
                                          @change="updateOptionOrderings(row_index, column_index, option_index, $el.value - 1, 'question_row_columns_question_row_column_options')"
                                        >
                                          <template
                                            x-for="(option, ooption_index) in question.cells[row_index][column_index].answer_choice"
                                            :key="option.id"
                                          >
                                            <option
                                              :selected="ooption_index == option_index"
                                              :value="ooption_index + 1"
                                              x-text="ooption_index + 1"
                                            ></option>
                                          </template>
                                        </select>
                                        <div
                                          @click="showAlertModal(`/question_row_columns_question_row_column_options/${option.id}`)"
                                          class="text-red-900 cursor-pointer"
                                        >
                                          <svg
                                            xmlns="http://www.w3.org/2000/svg"
                                            fill="none"
                                            viewBox="0 0 24 24"
                                            stroke-width="1.5"
                                            stroke="currentColor"
                                            class="w-4 h-4"
                                          >
                                            <path
                                              stroke-linecap="round"
                                              stroke-linejoin="round"
                                              d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"
                                            />
                                          </svg>
                                        </div>
                                      </div></div
                                  ></template>
                                </div>
                                <div>
                                  <label class="text-xs"
                                    >Add answer choice option
                                    <input
                                      name="option"
                                      type="text"
                                      @keyup.enter="if ($el.value === '') { return }; createOption(question.cells[row_index][column_index].id, { question_row_column_option_id: 1, name: $el.value }); $el.value = ''"
                                  /></label>
                                </div>
                              </div>
                            </template>
                            <template
                              x-if="question.cells[row_index][column_index]?.cell_type === 'dropdown'"
                            >
                              <div class="h-full flex flex-col justify-between">
                                <div
                                  class="whitespace-nowrap border-b-2 border-gray-300"
                                >
                                  Dropdown (single-choice)
                                </div>
                                <div
                                  class="grow border-b-2 border-gray-300 whitespace-nowrap min-h-[96px]"
                                >
                                  <template
                                    x-for="(option, option_index) in question.cells[row_index][column_index].answer_choice"
                                    :key="option.id"
                                    ><div
                                      class="flex justify-between items-center"
                                    >
                                      <input
                                        class="min-w-[3rem] border"
                                        :value="option.name"
                                        @input.debounce.500ms="updateQRCQRCO(option.id, { name: $el.value })"
                                      />
                                      <div
                                        class="flex justify-center items-center mx-2 space-x-2"
                                      >
                                        <select
                                          class="w-auto pl-2 !text-xs"
                                          @change="updateOptionOrderings(row_index, column_index, option_index, $el.value - 1, 'question_row_columns_question_row_column_options')"
                                        >
                                          <template
                                            x-for="(option, ooption_index) in question.cells[row_index][column_index].answer_choice"
                                            :key="option.id"
                                          >
                                            <option
                                              :selected="ooption_index == option_index"
                                              :value="ooption_index + 1"
                                              x-text="ooption_index + 1"
                                            ></option>
                                          </template>
                                        </select>
                                        <div
                                          @click="showAlertModal(`/question_row_columns_question_row_column_options/${option.id}`)"
                                          class="text-red-900 cursor-pointer"
                                        >
                                          <svg
                                            xmlns="http://www.w3.org/2000/svg"
                                            fill="none"
                                            viewBox="0 0 24 24"
                                            stroke-width="1.5"
                                            stroke="currentColor"
                                            class="w-4 h-4"
                                          >
                                            <path
                                              stroke-linecap="round"
                                              stroke-linejoin="round"
                                              d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"
                                            />
                                          </svg>
                                        </div>
                                      </div></div
                                  ></template>
                                </div>
                                <div>
                                  <label class="text-xs"
                                    >Add answer choice option
                                    <input
                                      name="option"
                                      type="text"
                                      @keyup.enter="if ($el.value === '') { return }; createOption(question.cells[row_index][column_index].id, { question_row_column_option_id: 1, name: $el.value }); $el.value = ''"
                                  /></label>
                                </div>
                              </div>
                            </template>
                            <template
                              x-if="question.cells[row_index][column_index]?.cell_type === 'radio'"
                            >
                              <div class="h-full flex flex-col justify-between">
                                <div
                                  class="whitespace-nowrap border-b-2 border-gray-300"
                                >
                                  Radio (single-choice)
                                </div>
                                <div
                                  class="grow border-b-2 border-gray-300 whitespace-nowrap min-h-[96px]"
                                >
                                  <template
                                    x-for="(option, option_index) in question.cells[row_index][column_index].answer_choice"
                                    :key="option.id"
                                    ><div
                                      class="flex justify-between items-center"
                                    >
                                      <input
                                        class="min-w-[3rem] border"
                                        :value="option.name"
                                        @input.debounce.500ms="updateQRCQRCO(option.id, { name: $el.value })"
                                      />
                                      <div
                                        class="flex justify-center items-center mx-2 space-x-2"
                                      >
                                        <label
                                          class="cursor-pointer text-gray-700 text-xs"
                                          >with follow-up
                                          <input
                                            class="!m-0 cursor-pointer"
                                            type="checkbox"
                                            x-model="option.followup_field.value"
                                            x-on:change="updateFollowupField(option.id, option.followup_field.id, $el.checked)"
                                        /></label>
                                        <select
                                          class="w-auto pl-2 !text-xs"
                                          @change="updateOptionOrderings(row_index, column_index, option_index, $el.value - 1, 'question_row_columns_question_row_column_options')"
                                        >
                                          <template
                                            x-for="(option, ooption_index) in question.cells[row_index][column_index].answer_choice"
                                            :key="option.id"
                                          >
                                            <option
                                              :selected="ooption_index == option_index"
                                              :value="ooption_index + 1"
                                              x-text="ooption_index + 1"
                                            ></option>
                                          </template>
                                        </select>
                                        <div
                                          @click="showAlertModal(`/question_row_columns_question_row_column_options/${option.id}`)"
                                          class="text-red-900 cursor-pointer"
                                        >
                                          <svg
                                            xmlns="http://www.w3.org/2000/svg"
                                            fill="none"
                                            viewBox="0 0 24 24"
                                            stroke-width="1.5"
                                            stroke="currentColor"
                                            class="w-4 h-4"
                                          >
                                            <path
                                              stroke-linecap="round"
                                              stroke-linejoin="round"
                                              d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"
                                            />
                                          </svg>
                                        </div>
                                      </div></div
                                  ></template>
                                </div>
                                <div>
                                  <label class="text-xs"
                                    >Add answer choice option
                                    <input
                                      name="option"
                                      type="text"
                                      @keyup.enter="if ($el.value === '') { return }; createOption(question.cells[row_index][column_index].id, { question_row_column_option_id: 1, name: $el.value }); $el.value = ''"
                                  /></label>
                                </div>
                              </div>
                            </template>
                            <template
                              x-if="question.cells[row_index][column_index]?.cell_type === 'select2_single'"
                            >
                              <div class="h-full flex flex-col justify-between">
                                <div
                                  class="whitespace-nowrap border-b-2 border-gray-300"
                                >
                                  Select-One (with write-in)
                                </div>
                                <div
                                  class="grow border-b-2 border-gray-300 whitespace-nowrap min-h-[96px]"
                                >
                                  <template
                                    x-for="(option, option_index) in question.cells[row_index][column_index].answer_choice"
                                    :key="option.id"
                                    ><div
                                      class="flex justify-between items-center"
                                    >
                                      <input
                                        class="min-w-[3rem] border"
                                        :value="option.name"
                                        @input.debounce.500ms="updateQRCQRCO(option.id, { name: $el.value })"
                                      />
                                      <div
                                        class="flex justify-center items-center mx-2 space-x-2"
                                      >
                                        <select
                                          class="w-auto pl-2 !text-xs"
                                          @change="updateOptionOrderings(row_index, column_index, option_index, $el.value - 1, 'question_row_columns_question_row_column_options')"
                                        >
                                          <template
                                            x-for="(option, ooption_index) in question.cells[row_index][column_index].answer_choice"
                                            :key="option.id"
                                          >
                                            <option
                                              :selected="ooption_index == option_index"
                                              :value="ooption_index + 1"
                                              x-text="ooption_index + 1"
                                            ></option>
                                          </template>
                                        </select>
                                        <div
                                          @click="showAlertModal(`/question_row_columns_question_row_column_options/${option.id}`)"
                                          class="text-red-900 cursor-pointer"
                                        >
                                          <svg
                                            xmlns="http://www.w3.org/2000/svg"
                                            fill="none"
                                            viewBox="0 0 24 24"
                                            stroke-width="1.5"
                                            stroke="currentColor"
                                            class="w-4 h-4"
                                          >
                                            <path
                                              stroke-linecap="round"
                                              stroke-linejoin="round"
                                              d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"
                                            />
                                          </svg>
                                        </div>
                                      </div></div
                                  ></template>
                                </div>
                                <div>
                                  <label class="text-xs"
                                    >Add answer choice option
                                    <input
                                      name="option"
                                      type="text"
                                      @keyup.enter="if ($el.value === '') { return }; createOption(question.cells[row_index][column_index].id, { question_row_column_option_id: 1, name: $el.value }); $el.value = ''"
                                  /></label>
                                </div>
                              </div>
                            </template>
                            <template
                              x-if="question.cells[row_index][column_index]?.cell_type === 'select2_multi'"
                            >
                              <div class="h-full flex flex-col justify-between">
                                <div
                                  class="whitespace-nowrap border-b-2 border-gray-300"
                                >
                                  Select-Multiple (with write-in)
                                </div>
                                <div
                                  class="grow border-b-2 border-gray-300 whitespace-nowrap min-h-[96px]"
                                >
                                  <template
                                    x-for="(option, option_index) in question.cells[row_index][column_index].answer_choice"
                                    :key="option.id"
                                    ><div
                                      class="flex justify-between items-center"
                                    >
                                      <input
                                        class="min-w-[3rem] border"
                                        :value="option.name"
                                        @input.debounce.500ms="updateQRCQRCO(option.id, { name: $el.value })"
                                      />
                                      <div
                                        class="flex justify-center items-center mx-2 space-x-2"
                                      >
                                        <select
                                          class="w-auto pl-2 !text-xs"
                                          @change="updateOptionOrderings(row_index, column_index, option_index, $el.value - 1, 'question_row_columns_question_row_column_options')"
                                        >
                                          <template
                                            x-for="(option, ooption_index) in question.cells[row_index][column_index].answer_choice"
                                            :key="option.id"
                                          >
                                            <option
                                              :selected="ooption_index == option_index"
                                              :value="ooption_index + 1"
                                              x-text="ooption_index + 1"
                                            ></option>
                                          </template>
                                        </select>
                                        <div
                                          @click="showAlertModal(`/question_row_columns_question_row_column_options/${option.id}`)"
                                          class="text-red-900 cursor-pointer"
                                        >
                                          <svg
                                            xmlns="http://www.w3.org/2000/svg"
                                            fill="none"
                                            viewBox="0 0 24 24"
                                            stroke-width="1.5"
                                            stroke="currentColor"
                                            class="w-4 h-4"
                                          >
                                            <path
                                              stroke-linecap="round"
                                              stroke-linejoin="round"
                                              d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"
                                            />
                                          </svg>
                                        </div>
                                      </div></div
                                  ></template>
                                </div>
                                <div>
                                  <label class="text-xs"
                                    >Add answer choice option
                                    <input
                                      name="option"
                                      type="text"
                                      @keyup.enter="if ($el.value === '') { return }; createOption(question.cells[row_index][column_index].id, { question_row_column_option_id: 1, name: $el.value }); $el.value = ''"
                                  /></label>
                                </div>
                              </div>
                            </template>
                          </div>
                          <div class="border-l border-gray-300">
                            <div
                              @click="updateCellType(question.cells[row_index][column_index], { question_row_column_type: { name: 'text' } })"
                              class="cursor-pointer p-2 text-[10px] hover:bg-gray-100"
                              :class="{
                                'font-bold': 'text' === question.cells[row_index][column_index].cell_type,
                                'bg-gray-100': 'text' === question.cells[row_index][column_index].cell_type
                              }"
                            >
                              Text
                            </div>
                            <div
                              @click="updateCellType(question.cells[row_index][column_index], { question_row_column_type: { name: 'numeric' } })"
                              class="cursor-pointer p-2 text-[10px] hover:bg-gray-100"
                              :class="{
                                'font-bold': 'numeric' === question.cells[row_index][column_index].cell_type,
                                'bg-gray-100': 'numeric' === question.cells[row_index][column_index].cell_type
                              }"
                            >
                              Numeric
                            </div>
                            <div
                              @click="updateCellType(question.cells[row_index][column_index], { question_row_column_type: { name: 'checkbox' } })"
                              class="cursor-pointer p-2 text-[10px] hover:bg-gray-100"
                              :class="{
                                'font-bold': 'checkbox' === question.cells[row_index][column_index].cell_type,
                                'bg-gray-100': 'checkbox' === question.cells[row_index][column_index].cell_type
                              }"
                            >
                              Checkbox
                            </div>
                            <div
                              @click="updateCellType(question.cells[row_index][column_index], { question_row_column_type: { name: 'dropdown' } })"
                              class="cursor-pointer p-2 text-[10px] hover:bg-gray-100"
                              :class="{
                                'font-bold': 'dropdown' === question.cells[row_index][column_index].cell_type,
                                'bg-gray-100': 'dropdown' === question.cells[row_index][column_index].cell_type
                              }"
                            >
                              Dropdown
                            </div>
                            <div
                              @click="updateCellType(question.cells[row_index][column_index], { question_row_column_type: { name: 'radio' } })"
                              class="cursor-pointer p-2 text-[10px] hover:bg-gray-100"
                              :class="{
                                'font-bold': 'radio' === question.cells[row_index][column_index].cell_type,
                                'bg-gray-100': 'radio' === question.cells[row_index][column_index].cell_type
                              }"
                            >
                              Radio
                            </div>
                            <div
                              @click="updateCellType(question.cells[row_index][column_index], { question_row_column_type: { name: 'select2_single' } })"
                              class="cursor-pointer p-2 text-[10px] hover:bg-gray-100"
                              :class="{
                                'font-bold': 'select2_single' === question.cells[row_index][column_index].cell_type,
                                'bg-gray-100': 'select2_single' === question.cells[row_index][column_index].cell_type
                              }"
                            >
                              Select One
                            </div>
                            <div
                              @click="updateCellType(question.cells[row_index][column_index], { question_row_column_type: { name: 'select2_multi' } })"
                              class="cursor-pointer p-2 text-[10px] hover:bg-gray-100"
                              :class="{
                                'font-bold': 'select2_multi' === question.cells[row_index][column_index].cell_type,
                                'bg-gray-100': 'select2_multi' === question.cells[row_index][column_index].cell_type
                              }"
                            >
                              Select Multiple
                            </div>
                          </div>
                        </div>
                      </template>
                    </td>
                  </template>
                </tr>
              </template>
              <tr>
                <th
                  class="whitespace-nowrap cursor-pointer flex justify-between items-center h-full"
                  @click="addRow(question)"
                >
                  <div class="p-2">Click to add row</div>
                </th>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </template>
  </div>
  <div
    @click="createQuestion()"
    class="bg-srdrpurple text-white text-sm rounded-md p-1 cursor-pointer text-center w-32"
  >
    Add Question
  </div>

  <!-- prettier-ignore -->
  <%= render 'extraction_forms_projects/build/type2/loading_modal' %>
  <%= render 'extraction_forms_projects/build/type2/dependencies_modal' %>
  <%= render 'extraction_forms_projects/build/type2/preview_modal' %>
</div>

<script>
  document.addEventListener("alpine:init", () => {
    const headers = {
      Accept: "application/json",
      "Content-Type": "application/json",
      "X-Requested-With": "XMLHttpRequest",
      "X-CSRF-Token": document.querySelector("[name='csrf-token']").content,
    };
    const no_extractions_exist = <%= @extractions.count.zero? %>;

    Alpine.data("type_2_question_list", () => ({
      loading: false,
      questions: [],
      dependencies_modal: false,
      preview_modal: false,
      dependencies_table: "",
      preview_content: "",
      isAlertModalOpen: false,
      alertModalContent: "",
      pendingDeleteUrl: "",

      async init() {
        this.loading = true;
        await this.fetch_questions();
        this.loading = false;
      },

      async updateRow(question_row, params) {
        const response = await fetch(`/question_rows/${question_row.id}`, {
          method: "PATCH",
          headers,
          credentials: "same-origin",
          body: JSON.stringify(params),
        });
        this.report(response.status);
      },
      async updateColumn(question_row_column, params) {
        const response = await fetch(
          `/question_row_columns/${question_row_column.id}`,
          {
            method: "PATCH",
            headers,
            credentials: "same-origin",
            body: JSON.stringify(params),
          }
        );
        this.report(response.status);
      },
      async addRow(question) {
        this.loading = true;
        const response = await fetch(
          `/questions/${question.id}/question_rows`,
          {
            method: "POST",
            headers,
            credentials: "same-origin",
          }
        );
        this.report(response.status);
        await this.fetch_questions();
        this.loading = false;
      },
      async addColumn(row) {
        this.loading = true;
        const response = await fetch(
          `/question_rows/${row.id}/question_row_columns`,
          {
            method: "POST",
            headers,
            credentials: "same-origin",
          }
        );
        this.report(response.status);
        await this.fetch_questions();
        this.loading = false;
      },
      async duplicateRow(question_row) {
        this.loading = true;
        const response = await fetch(
          `/question_rows/${question_row.id}/duplicate`,
          {
            method: "POST",
            headers,
            credentials: "same-origin",
          }
        );
        this.report(response.status);
        await this.fetch_questions();
        this.loading = false;
      },
      async updateCellType(question_row_column, params) {
        if (no_extractions_exist || confirm('Changing field types while extractions exist may lead to data loss.  Would you like to proceed anyway?')) {
          this.loading = true;
          const response = await fetch(
            `/question_row_columns/${question_row_column.id}`,
            {
              method: "PATCH",
              headers,
              credentials: "same-origin",
              body: JSON.stringify(params),
            }
          );
          this.report(response.status);
          await this.fetch_questions();
          this.loading = false;
        }
      },
      async updateCellOption(qrcqrco_id, params) {
        const response = await fetch(
          `/question_row_columns_question_row_column_options/${qrcqrco_id}`,
          {
            method: "PATCH",
            headers,
            credentials: "same-origin",
            body: JSON.stringify(params),
          }
        );
        this.report(response.status);
      },
      async createOption(question_row_column_id, params) {
        this.loading = true;
        const response = await fetch(
          `/question_row_columns/${question_row_column_id}/question_row_columns_question_row_column_options`,
          {
            method: "POST",
            headers,
            credentials: "same-origin",
            body: JSON.stringify(params),
          }
        );
        this.report(response.status);
        await this.fetch_questions();
        this.loading = false;
      },
      async updateFollowupField(
        qrcqrco_id,
        followup_field_id,
        checked
      ) {
        this.loading = true;
        const url = checked
          ? `/question_row_columns_question_row_column_options/${qrcqrco_id}/followup_fields`
          : `/followup_fields/${followup_field_id}`;
        const response = await fetch(url, {
          method: checked ? "POST" : "DELETE",
          headers,
          credentials: "same-origin",
        });
        this.report(response.status);
        await this.fetch_questions();
        this.loading = false;
      },
      async deleteQuestion(q) {
        this.loading = true;
        await this.destroyResource(`/questions/${q.id}`, "question");
        await this.fetch_questions();
        this.loading = false;
      },
      async updateQuestion(question, params) {
        const response = await fetch(`/questions/${question.id}`, {
          method: "PATCH",
          headers,
          credentials: "same-origin",
          body: JSON.stringify(params),
        });
        this.report(response.status);
      },
      async updateOrderings(dragPos, dropPos, table) {
        this.loading = true;
        const temp = this.questions[dropPos];
        this.questions[dropPos] = this.questions[dragPos];
        this.questions[dragPos] = temp;
        const tempOrderableElements = this.questions;
        this.questions = [];
        await this.$nextTick(async () => {
          this.questions = tempOrderableElements;
          const orderings = {};
          tempOrderableElements.forEach(
            (oe, index) => (orderings[index] = { id: oe.id, table })
          );
          const response = await fetch("/api/v1/orderings/update_positions", {
            method: "PATCH",
            headers,
            body: JSON.stringify({ orderings }),
          });
          this.questions.forEach((el, index) => (el.pos = index + 1));
          this.report(response.status);
        });
        this.loading = false;
      },

      async updateOptionOrderings(
        row_index,
        column_index,
        dragPos,
        dropPos,
        table
      ) {
        this.loading = true;
        const temp =
          this.question.cells[row_index][column_index].answer_choice[dropPos];
        this.question.cells[row_index][column_index].answer_choice[dropPos] =
          this.question.cells[row_index][column_index].answer_choice[dragPos];
        this.question.cells[row_index][column_index].answer_choice[dragPos] =
          temp;
        const tempOrderableElements =
          this.question.cells[row_index][column_index].answer_choice;
        this.question.cells[row_index][column_index].answer_choice = [];
        await this.$nextTick(async () => {
          this.question.cells[row_index][column_index].answer_choice =
            tempOrderableElements;
          const orderings = {};
          tempOrderableElements.forEach(
            (oe, index) => (orderings[index] = { id: oe.id, table })
          );
          const response = await fetch("/api/v1/orderings/update_positions", {
            method: "PATCH",
            headers,
            body: JSON.stringify({ orderings }),
          });
          this.question.cells[row_index][column_index].answer_choice.forEach(
            (el, index) => (el.pos = index + 1)
          );
          this.report(response.status);
        });
        this.loading = false;
      },

      async report(responseStatus) {
        if (responseStatus >= 200 && responseStatus < 300) {
          toastr.success("Updated succesfully!", null, { timeOut: 1000 });
        } else {
          toastr.error("We've encountered an error", null, { timeOut: 1000 });
        }
      },

      async fetchPreviewContent() {
        this.loading = true;
        this.preview_content = "";
        this.preview_content = await (
          await fetch(
            "/extraction_forms_projects/<%= @extraction_forms_project.id %>/preview?panel-tab=<%= params['panel-tab'] %>&partial=true"
          )
        ).text();
        this.$nextTick(() => {
          document.dispatchEvent(
            new CustomEvent("extractionSectionLoaded", {})
          );
        });
        this.loading = false;
      },

      showAlertModal(url) {
        this.pendingDeleteUrl = url;
        this.alertModalContent =
          "Deleting this resource will result in the removal of any extracted data for this resource in all Extractions. Please confirm deletion.";
        this.isAlertModalOpen = true;
      },

      modalConfirmAction() {
        this.destroyResource(this.pendingDeleteUrl);
        this.closeAlertModal();
      },

      closeAlertModal() {
        this.isAlertModalOpen = false;
      },

      async destroyResource(url) {
        this.loading = true;
        const response = await fetch(url, {
          method: "DELETE",
          headers: {
            Accept: "application/json",
            "X-CSRF-Token": document.querySelector("[name='csrf-token']")
              .content,
          },
        });

        await this.fetch_questions();
        toastr.success("Successfully deleted", null, {
          timeOut: 1000,
        });
        this.loading = false;
      },

      async createQuestion() {
        this.loading = true;
        const response = await fetch(
          `/extraction_forms_projects_sections/<%= efps.id %>/questions`,
          {
            method: "POST",
            headers,
            body: JSON.stringify({
              question: { name: "", description: "" },
            }),
          }
        );
        this.report(response.status);
        await this.fetch_questions();
        this.loading = false;
      },

      async createDuplicateQuestion(questionId) {
        this.loading = true;
        const response = await fetch(`/questions/${questionId}/duplicate`, {
          method: "POST",
          headers: {
            Accept: "application/json",
            "X-CSRF-Token": document.querySelector("[name='csrf-token']")
              .content,
          },
        });
        await this.fetch_questions();
        toastr.success("Question was succesfully duplicated!", null, {
          timeOut: 1000,
        });
        this.loading = false;
      },

      async fetch_questions() {
        this.questions = [];
        const response = await fetch(
          "/extraction_forms_projects/<%= @extraction_forms_project.id %>/build?panel-tab=<%= params['panel-tab'] %>",
          {
            method: "GET",
            headers,
          }
        );
        const questions = await response.json();
        this.questions = questions;
      },

      async updateDependenciesTable(edit_question_id) {
        this.loading = true;
        this.dependencies_table = await (
          await fetch(
            `/questions/${edit_question_id}/dependencies?partial=true`
          )
        ).text();
        this.loading = false;
      },

      async updateQRCQRCO(qrcqrco_id, params) {
        const response = await fetch(
          `/question_row_columns_question_row_column_options/${qrcqrco_id}`,
          {
            method: "PATCH",
            headers,
            credentials: "same-origin",
            body: JSON.stringify(params),
          }
        );
        this.report(response.status);
      },
    }));
  });
</script>
