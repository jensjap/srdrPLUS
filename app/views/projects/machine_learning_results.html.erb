<script src="/echarts.min.js"></script>

<div x-data="machine_learning_results" data-top-unscreened-citations="<%= @searched_top_unscreened_citations.to_json %>">
  <%= render '/abstract_screenings/detail_view' %>
  <div id="dataContainer"
      data-scores="<%= @scores.to_json %>"
      data-labels-with-scores="<%= @labels_with_scores.to_json %>"
      style="display: none;">
  </div>

  <div x-data="{ threshold: 0.5, showConfusionMatrix: false }" class="bg-gray-100 p-8">
    <h1 class="text-3xl font-bold mb-4">Machine Learning Results</h1>

    <p class="text-xl mb-2">Total Number of Citations: <span class="font-semibold"><%= @total_citation_number %></span></p>
    <p class="text-xl mb-2">Latest Model Time: <span class="font-semibold"><%= @latest_model_time %></span></p>
    <p class="text-xl mb-4">Rejection Streak Counter
      <i class='fi-info text-blue-500'
         title='Number of rejections since the last time citation was accepted.
Please note that the ordering of citations is based on first
time labeled.'>
      </i>
      : <span class="font-semibold"><%= @rejection_counter %></span>
    </p>
    <div id="scatterChart" style="width: 550px; height: 400px;"></div>

    <div class="flex">
      <div class="flex-1 p-8 bg-gray-100">
        <h2 class="text-3xl font-bold mb-4">Unscreened Citation Predictions</h2>
        <p class="text-xl mb-4">Percentage unscreened: <span class="font-semibold"><%= @percentage_unscreened %>%</span></p>
        <p class="text-xl mb-4">Untrained citations: <span class="font-semibold"><%= @untrained_citation_number %> </span><span class="text-sm mb-4">(Models are trained once a day once labels for 100 citations have been recorded)</span></p>
        <p class="text-xl mb-4">Highest Score: <span class="font-semibold"><%= @scores.max %></span></p>

        <div id="barChart" style="width: 600px;height:400px;"></div>

        <div class="flex items-center mb-4">
          <label for="threshold" class="text-xl mr-4">Enter threshold:</label>
          <input id="threshold" x-model="threshold" type="float" placeholder="Enter threshold" class="w-1/6 p-2 rounded border shadow" />
        </div>

        <p class="text-xl">
          <span>Number of citations above the threshold:</span>
          <span x-text="scores_above_threshold(<%= @scores.to_json %>, threshold)"></span>
        </p>

        <h2 class="text-3xl font-bold mt-8 mb-4">Top 20 Unscreened Citations</h2>
        <table class="w-full divide-y divide-gray-300 mb-4">
          <thead class="bg-gray-50">
            <tr>
              <th
                scope="col"
                class="cursor-pointer py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6"
              >
                <div class="flex justify-between">
                  Accession No. (e.g. PubMed ID)
                </div>
              </th>
              <th
                scope="col"
                class="cursor-pointer px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
              >
                <div class="flex justify-between">
                  Authors
                </div>
              </th>
              <th
                scope="col"
                class="cursor-pointer px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
              >
                <div class="flex justify-between">
                  Title
                </div>
              </th>
              <th
                scope="col"
                class="cursor-pointer px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
              >
                <div class="flex justify-between">
                  Pub Date
                </div>
              </th>
              <th
                scope="col"
                class="cursor-pointer px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
              >
                <div class="flex justify-between">
                  Score
                </div>
              </th>
              <th
                scope="col"
                class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 select-none"
              ></th>
            </tr>
          </thead>
          <tbody class="divide-y divide-gray-200 bg-white">
            <template x-if="results == null">
              <tr>
                <td>Loading..</td>
              </tr>
            </template>
            <template x-if="results != null && results.length == 0">
              <tr>
                <td>No results</td>
              </tr>
            </template>
            <template x-if="results != null">
              <template x-for="(result, i) in results">
                <tr>
                  <td
                    class="pl-4 pr-3 text-sm text-gray-500 max-w-[250px] sm:pl-6 w-32 overflow-hidden text-ellipsis whitespace-nowrap"
                    x-text="result.accession_number_alts"
                  ></td>
                  <td
                    class="px-3 text-sm text-gray-500 max-w-[150px] overflow-hidden text-ellipsis whitespace-nowrap"
                    x-text="result.author_map_string"
                  ></td>
                  <td
                    class="px-3 text-sm text-gray-500 max-w-[250px] overflow-hidden text-ellipsis whitespace-nowrap"
                    x-text="result.name"
                  ></td>
                  <td
                    class="px-3 text-sm text-gray-500 w-24 overflow-hidden text-ellipsis whitespace-nowrap"
                    x-text="result.year"
                  ></td>
                  <td
                    class="pl-4 pr-3 text-sm text-gray-500 max-w-[250px] sm:pl-6 w-32 overflow-hidden text-ellipsis whitespace-nowrap"
                    x-text="result.ml_score"
                  ></td>
                  <td
                    class="cursor-pointer select-none px-3 text-sm text-gray-500 w-24 overflow-hidden text-ellipsis whitespace-nowrap"
                    @click.stop="if (showDetailView && detailedResult == i) { showDetailView = false } else { detailedResult = i; showDetailView = true }"
                  >
                    <div>See Details</div>
                  </td>
                </tr>
              </template>
            </template>
          </tbody>
        </table>
        <button @click="showConfusionMatrix = !showConfusionMatrix" class="mb-4 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
          Toggle Confusion Matrix
        </button>
        <div class="flex" x-show="showConfusionMatrix" x-cloak>
          <div class="flex-1">
            <h2 class="text-3xl font-bold mb-4">Predictions vs. Real Labels</h2>
            <div id="confusionMatrix" style="width: 600px;height:400px;"></div>
          </div>
          <div class="flex-1">
            <h2 class="text-3xl font-bold mb-4">Performance Metrics</h2>
            <table class="w-full divide-y divide-gray-300 mb-4">
              <thead class="bg-gray-50">
                <tr>
                  <th class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900">Metric</th>
                  <th class="py-3.5 px-3 text-left text-sm font-semibold text-gray-900">Value</th>
                </tr>
              </thead>
              <tbody class="divide-y divide-gray-200 bg-white">
                <tr>
                  <td class="py-3.5 pl-4 pr-3 text-sm text-gray-500">Precision</td>
                  <td id="precision" class="py-3.5 px-3 text-sm text-gray-500"></td>
                </tr>
                <tr>
                  <td class="py-3.5 pl-4 pr-3 text-sm text-gray-500">Sensitivity</td>
                  <td id="recall" class="py-3.5 px-3 text-sm text-gray-500"></td>
                </tr>
                <tr>
                  <td class="py-3.5 pl-4 pr-3 text-sm text-gray-500">F1 Score</td>
                  <td id="f1-score" class="py-3.5 px-3 text-sm text-gray-500"></td>
                </tr>
                <tr>
                  <td class="py-3.5 pl-4 pr-3 text-sm text-gray-500">Accuracy</td>
                  <td id="accuracy" class="py-3.5 px-3 text-sm text-gray-500"></td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  function percentage_below_threshold(scores, threshold) {
    const below = scores.filter(score => score < threshold).length;
    return (below / scores.length) * 100;
  }

  function calculateBins(scores) {
    const bins = new Array(10).fill(0);
    scores.forEach(score => {
      const index = Math.min(Math.floor(score * 10), 9);
      bins[index]++;
    });
    return bins;
  }

  function calculateConfusionMatrix(labelsWithScores, threshold) {
    let TP = 0, FP = 0, TN = 0, FN = 0;
    Object.entries(labelsWithScores).forEach(([label, scores]) => {
      scores.forEach(score => {
        if (score >= threshold) {
          label == "1" ? TP++ : FP++;
        } else {
          label == "0" ? TN++ : FN++;
        }
      });
    });
    return { TP, FP, TN, FN };
  }

  function scores_above_threshold(scores, threshold) {
    return scores.filter(score => score >= threshold).length;
  }

  document.addEventListener('alpine:init', () => {
    Alpine.data('machine_learning_results', () => ({
      detailedResult: 0,
      showDetailView: false,
      init() {
        this.results = JSON.parse(this.$el.getAttribute('data-top-unscreened-citations'));
        this.results = this.results['query'].sort((a, b) => b.ml_score - a.ml_score);
      },
    }));
  });

  const barChart = echarts.init(document.getElementById('barChart'));
  const matrixChart = echarts.init(document.getElementById('confusionMatrix'));
  const scatterChart = echarts.init(document.getElementById('scatterChart'));

  const dataContainer = document.getElementById('dataContainer');
  const scores = JSON.parse(dataContainer.getAttribute('data-scores'));
  const labelsWithScores = JSON.parse(dataContainer.getAttribute('data-labels-with-scores'));

  const barData = calculateBins(scores);
  const { TP, FP, TN, FN } = calculateConfusionMatrix(labelsWithScores, 0.5);
  const precision = TP + FP === 0 ? 0 : (TP / (TP + FP));
  const recall = TP + FN === 0 ? 0 : (TP / (TP + FN));
  const f1 = precision + recall === 0 ? 0 : (2 * (precision * recall) / (precision + recall));
  const accuracy = TP + FP + TN + FN === 0 ? 0 : (TP + TN) / (TP + FP + TN + FN)

  document.getElementById('precision').innerText = precision.toFixed(2);
  document.getElementById('recall').innerText = recall.toFixed(2);
  document.getElementById('f1-score').innerText = f1.toFixed(2);
  document.getElementById('accuracy').innerText = accuracy.toFixed(2);

  const barOption = {
    title: {
      text: 'Score Distribution'
    },
    xAxis: {
      type: 'category',
      data: ['0-0.1', '0.1-0.2', '0.2-0.3', '0.3-0.4', '0.4-0.5', '0.5-0.6', '0.6-0.7', '0.7-0.8', '0.8-0.9', '0.9-1']
    },
    yAxis: {
      type: 'value',
      minInterval: 1,
      scale: true
    },
    series: [{
      data: barData,
      type: 'bar'
    }]
  };

  const matrixOption = {
    title: {
      text: 'Confusion Matrix'
    },
    tooltip: {
      trigger: 'item',
      formatter: function (params) {
        return params.value[2];
      }
    },
    visualMap: {
      show: false,
      min: 0,
      max: Math.max(TP, FP, TN, FN),
      calculable: true,
      orient: 'horizontal',
      left: 'center',
      bottom: '15%',
      inRange: {
        color: ['#f2f2f2', '#D9E6F2', '#a2c4c9']
      }
    },
    xAxis: {
      type: 'category',
      data: ['Predicted Accept', 'Predicted Reject']
    },
    yAxis: {
      type: 'category',
      data: ['Reject', 'Accept']
    },
    series: [{
      name: 'Confusion Matrix',
      type: 'heatmap',
      data: [
        [0, 0, FP],
        [0, 1, TP],
        [1, 0, TN],
        [1, 1, FN]
      ],
      label: {
        show: true
      }
    }]
  };

  const scatterData = <%= @estimated_coverage.map { |data| [data[:ratio], data[:estimated_coverage]] }.to_json %>;

  const scatterOption = {
    title: {
      text: 'Estimated Coverage',
    },
    xAxis: {
      name: 'Proportion of Studies Screened',
      nameLocation: 'middle',
      nameGap: 30,
      min: 0,
      max: 1,
      type: 'value'
    },
    yAxis: {
      name: 'Estimated Proportion of Relevant Studies Found',
      nameLocation: 'middle',
      nameGap: 40,
      min: 0,
      max: 1,
      type: 'value'
    },
    series: [{
      data: scatterData,
      type: 'line',
      smooth: true
    }]
  };

  barChart.setOption(barOption);
  matrixChart.setOption(matrixOption);
  scatterChart.setOption(scatterOption);
</script>
