<script src="/echarts.min.js"></script>

<div id="dataContainer"
     data-scores="<%= @scores.to_json %>"
     data-labels-with-scores="<%= @labels_with_scores.to_json %>"
     style="display: none;">
</div>

<div x-data="{ threshold: 0.5 }" class="bg-gray-100 p-8">
  <h1 class="text-3xl font-bold mb-4">Machine Learning Results</h1>

  <p class="text-xl mb-2">Total Number of Citations: <span class="font-semibold"><%= @total_citation_number %></span></p>
  <p class="text-xl mb-2">Latest Model Time: <span class="font-semibold"><%= @latest_model_time %></span></p>
  <p class="text-xl mb-2">Rejection Counter: <span class="font-semibold"><%= @rejection_counter %></span></p>

  <div class="flex">
    <div class="flex-1 p-8 bg-gray-100">
      <h2 class="text-3xl font-bold mb-4">Unscreened Citation Predictions</h2>
      <p class="text-xl mb-4">Percentage unscreened: <span class="font-semibold"><%= @percentage_unscreened %>%</span></p>
      <p class="text-xl mb-4">Untrained citations: <span class="font-semibold"><%= @untrained_citation_number %> </span><span class="text-sm mb-4">(Models are trained once a day once labels for 100 citations have been recorded)</span></p>
      <p class="text-xl mb-4">Highest Score: <span class="font-semibold"><%= @scores.max %></span></p>

      <div id="barChart" style="width: 600px;height:400px;"></div>

      <div class="flex items-center mb-4">
        <label for="threshold" class="text-xl mr-4">Enter threshold:</label>
        <input id="threshold" x-model="threshold" type="float" placeholder="Enter threshold" class="w-1/6 p-2 rounded border shadow" />
      </div>

      <p class="text-xl">
        <span>Number of citations above the threshold:</span>
        <span x-text="scores_above_threshold(<%= @scores.to_json %>, threshold)"></span>
      </p>
    </div>
  </div>
</div>

<script>
  function percentage_below_threshold(scores, threshold) {
    const below = scores.filter(score => score < threshold).length;
    return (below / scores.length) * 100;
  }

  function calculateBins(scores) {
    const bins = new Array(10).fill(0);
    scores.forEach(score => {
      const index = Math.min(Math.floor(score * 10), 9);
      bins[index]++;
    });
    return bins;
  }

  function calculateConfusionMatrix(labelsWithScores, threshold) {
    let TP = 0, FP = 0, TN = 0, FN = 0;
    Object.entries(labelsWithScores).forEach(([label, scores]) => {
      scores.forEach(score => {
        if (score >= threshold) {
          label == "1" ? TP++ : FP++;
        } else {
          label == "-1" ? TN++ : FN++;
        }
      });
    });
    return { TP, FP, TN, FN };
  }

  function scores_above_threshold(scores, threshold) {
    return scores.filter(score => score >= threshold).length;
  }

  const barChart = echarts.init(document.getElementById('barChart'));

  const dataContainer = document.getElementById('dataContainer');
  const scores = JSON.parse(dataContainer.getAttribute('data-scores'));
  const labelsWithScores = JSON.parse(dataContainer.getAttribute('data-labels-with-scores'));

  const barData = calculateBins(scores);

  const barOption = {
    title: {
      text: 'Score Distribution'
    },
    xAxis: {
      type: 'category',
      data: ['0-0.1', '0.1-0.2', '0.2-0.3', '0.3-0.4', '0.4-0.5', '0.5-0.6', '0.6-0.7', '0.7-0.8', '0.8-0.9', '0.9-1']
    },
    yAxis: {
      type: 'value',
      minInterval: 1,
      scale: true
    },
    series: [{
      data: barData,
      type: 'bar'
    }]
  };

  barChart.setOption(barOption);
</script>
