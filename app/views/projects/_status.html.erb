<div x-data="projectStatus" class="flex space-x-8">
  <div class="relative w-48">
    <h1 class="text-lg font-bold">By User</h1>
    <ul class="h-[calc(100vh-280px)] overflow-auto !m-0">
      <li
        class="cursor-pointer text-xs"
        :class="{ 'font-bold': null === user_id }"
        @click="user_id = null; await getProjectStatus(); generateChart(); generateApprovalDurations();"
      >
        ALL USERS
      </li>
      <template x-for="projects_user in projectStatus?.projects_users">
        <li
          class="cursor-pointer truncate text-xs"
          :class="{ 'font-bold': projects_user.id === user_id }"
          x-text="`${projects_user.handle}`"
          :title="projects_user.handle"
          @click="user_id = projects_user.id; await getProjectStatus(); generateChart(); generateApprovalDurations();"
        ></li>
      </template>
    </ul>
  </div>
  <div class="grow">
    <div class="flex flex-col lg:flex-row">
      <div class="grow basis-0">
        <h1 class="text-lg font-bold">Overview</h1>
        <div
          id="logChart"
          style="width: calc(50vw - 9rem); height: 250px"
        ></div>
      </div>
      <div class="grow basis-0">
        <h1 class="text-lg font-bold">
          Approval Durations of Extractions in 'work accepted'
        </h1>
        <div
          id="extractionKPIChart"
          style="width: calc(50vw - 9rem); height: 250px"
        ></div>
      </div>
    </div>
    <div class="mb-2">
      <h1 class="text-lg font-bold">
        Pending Work
        <span class="text-gray-600 text-xs"
          >(extractions not in 'work_accepted' status)</span
        >
        <span
          class="text-xs text-white bg-orange-700 p-1 rounded-md cursor-pointer select-none"
          :class="{
            'opacity-30': !pendingWorkFilter.awaiting_work
          }"
          @click="pendingWorkFilter.awaiting_work = !pendingWorkFilter.awaiting_work"
          >awaiting_work</span
        >
        <span
          class="text-xs text-white bg-blue-800 p-1 rounded-md cursor-pointer select-none"
          :class="{
            'opacity-30': !pendingWorkFilter.awaiting_review
          }"
          @click="pendingWorkFilter.awaiting_review = !pendingWorkFilter.awaiting_review"
          >awaiting_review</span
        >
        <span
          class="text-xs text-white bg-red-800 p-1 rounded-md cursor-pointer select-none"
          :class="{
            'opacity-30': !pendingWorkFilter.work_returned
          }"
          @click="pendingWorkFilter.work_returned = !pendingWorkFilter.work_returned"
          >work_returned</span
        >
      </h1>
      <div
        class="h-[calc(100vh-36rem)] overflow-y-scroll text-xs text-gray-500 border rounded-md"
      >
        <table class="table-fixed w-full">
          <thead>
            <tr>
              <th class="w-20">ID</th>
              <th>Citation Title</th>
              <th class="w-40">Extractor</th>
              <th class="w-24">Status</th>
              <th class="w-44">Status Date</th>
              <th class="w-40">Time Ago</th>
              <th class="w-48">Link</th>
            </tr>
          </thead>
          <tbody>
            <template x-for="extraction in filterPendingWork()">
              <tr>
                <td x-text="extraction.id" class="text-center"></td>
                <td
                  x-text="extraction.title"
                  :title="extraction.title"
                  class="truncate"
                ></td>
                <td
                  x-text="extraction.handle || 'System'"
                  :title="extraction.handle"
                  class="text-left truncate"
                ></td>
                <td
                  x-text="extraction.status"
                  class="text-center font-bold"
                  :class="{
                    'text-orange-700': extraction.status === 'awaiting_work',
                    'text-blue-800': extraction.status === 'awaiting_review',
                    'text-red-900': extraction.status === 'work_returned',
                  }"
                ></td>
                <td
                  x-text="new Date(extraction.created_at).toLocaleString()"
                  class="text-center"
                ></td>
                <td
                  x-text="extraction.time_ago_in_words"
                  class="text-center"
                ></td>
                <td>
                  <a
                    :href="`/extractions/${extraction.id}/work`"
                    x-text="`/extractions/${extraction.id}/work`"
                    target="_blank"
                    rel="noopener noreferrer"
                    class="underline"
                  ></a>
                </td>
              </tr>
            </template>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>
<script>
  document.addEventListener("alpine:init", () => {
    const headers = {
      Accept: "application/json",
      "Content-Type": "application/json",
      "X-Requested-With": "XMLHttpRequest",
      "X-CSRF-Token": document.querySelector("[name='csrf-token']").content,
    };
    Alpine.data("projectStatus", () => ({
      projectStatus: {},
      user_id: null,
      pendingWorkFilter: {
        awaiting_work: true,
        awaiting_review: true,
        work_returned: true,
      },

      async init() {
        await this.getProjectStatus();
        this.generateChart();
        this.generateApprovalDurations();
      },

      filterPendingWork() {
        return this.projectStatus.pending_work.filter(
          (extraction) => this.pendingWorkFilter[extraction.status]
        );
      },

      async getProjectStatus() {
        const url = new URL(window.location.href);
        const id = url.pathname.split("/")[2];
        const response = await fetch(
          `/projects/${id}/status?user_id=${this.user_id}`,
          {
            method: "GET",
            headers,
          }
        );
        const data = await response.json();
        this.projectStatus = data;
      },

      generateApprovalDurations() {
        const pieChart = echarts.init(
          document.getElementById("extractionKPIChart")
        );
        const data = this.projectStatus.extraction_kpis;
        const option = {
          tooltip: {
            trigger: "item",
          },
          legend: {
            orient: "vertical",
            left: "left",
          },
          series: [
            {
              name: "Time to Approval",
              type: "pie",
              radius: "50%",
              data,
            },
          ],
        };
        pieChart.setOption(option);
      },

      generateChart() {
        const barChart = echarts.init(document.getElementById("logChart"));
        const series = this.projectStatus.extraction_activities;
        const option2 = {
          tooltip: {
            trigger: "axis",
          },
          legend: {},
          xAxis: [
            {
              type: "category",
              data: [
                "21 days or more",
                "14 - 21 days ago",
                "7 - 14 days ago",
                "0 - 7 days ago",
              ],
            },
          ],
          yAxis: [
            {
              type: "value",
            },
          ],
          series,
        };
        barChart.setOption(option2);
      },
    }));
  });
</script>
