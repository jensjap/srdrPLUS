<%= content_for(:title, 'SRDR+ Full-Text Screening') %>
<div
  class="overflow-hidden"
  x-data="screenStore"
  @keyup.escape.window="closeAllModals()"
>
  <!-- prettier-ignore -->
  <%= render 'fulltext_screenings/screen/add_reasoning' %>
  <%= render 'fulltext_screenings/screen/confirmation_modal' %>
  <%= render 'fulltext_screenings/screen/history_panel' %>
  <div
    :class="desktop ? 'top-0 bottom-24 border-l border-b border-gray-600 fixed p-4 left-2/3 right-0 overflow-y-scroll overflow-x-hidden bg-white' : ''"
  >
    <!-- prettier-ignore -->
    <%= render 'fulltext_screenings/screen/reasoning_menu' %>
    <%= render 'fulltext_screenings/screen/screening_form' %>
  </div>
  <div
    class="mx-auto lg:mx-0 lg:w-2/3 h-24 absolute inset-0 overflow-y-hidden flex flex-col justify-center"
    :class="resolutionMode ? 'bg-purple-100' : 'bg-gray-300'"
  >
    <a
      id="dynamic-link"
      href="<%= fulltext_screening_path(params[:fulltext_screening_id]) %>"
      class="cursor-pointer z-[5] absolute top-4 right-4 bg-gray-100 rounded-md p-2 inline-flex items-center justify-center text-gray-400 hover:text-gray-500 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500"
    >
      <span class="sr-only">Close menu</span>
      <!-- Heroicon name: outline/x -->
      Exit
    </a>
    <button
      @click="historyPanel = !historyPanel"
      class="absolute top-0 left-0 bg-gray-100 p-1 px-2 text-xs rounded-full z-[9] flex flex-row items-center cursor-pointer"
      :class="resolutionMode ? 'bg-srdrpurple text-white' : ''"
    >
      <span x-text="resolutionMode ? 'Resolved Labels' : 'Your Labels'"></span>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        stroke-width="1"
        stroke="currentColor"
        class="w-3 h-3"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M11.25 4.5l7.5 7.5-7.5 7.5m-6-15l7.5 7.5-7.5 7.5"
        />
      </svg>
    </button>
    <button
      @click="getFsrId()"
      class="cursor-pointer z-[5] absolute top-4 right-16 bg-gray-100 rounded-md p-2 inline-flex items-center justify-center text-black"
    >
      Continue Screening
    </button>
    <div class="h-24 mr-44 overflow-y-auto flex items-center">
      <div>
        <div class="flex items-center">
          <h1
            class="px-8 text-base font-bold leading-none"
            x-text="citation.title"
          ></h1>
        </div>
      </div>
    </div>
  </div>
  <div
    class="mx-auto lg:mx-0 lg:w-2/3 h-auto block absolute inset-0 mt-24 overflow-y-auto overflow-x-hidden bg-gray-100"
    :class="desktop ? '' : 'mb-24'"
  >
    <div class="vertical-scroll-wrapper">
      <div class="vertical-scroll-wrapper-item">
        <div class="px-8 leading-5" x-text="citation.abstract"></div>
        <hr />
        <div
          class="px-8 break-all leading-none"
          x-text="citation.keywords"
        ></div>
        <div class="px-8 break-all leading-none" x-text="citation.id"></div>
        <div
          class="px-8 break-all leading-none"
          x-text="citation.journal_meta_info"
        ></div>
      </div>
    </div>
  </div>

  <div
    :class="desktop ? 'hidden' : 'mx-auto lg:mx-0 lg:w-2/3 absolute bottom-0 left-0 right-0 bg-gray-100 h-24'"
  >
    <div class="h-full text-white">
      <div class="grid grid-cols-3 h-full">
        <div
          class="cursor-pointer border-r-8 bg-red-500 flex justify-center items-center rounded-tl-2xl"
          @click="handleLabelButtonClick(-1)"
          :class="(fsr.label == -1 || fsr.label == null) ? '' : 'saturate-[0.1]'"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-10 w-10"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fill-rule="evenodd"
              d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
              clip-rule="evenodd"
            />
          </svg>
        </div>
        <div class="grid grid-rows-2">
          <div
            class="cursor-pointer border-b-4 bg-srdrpurple flex justify-center items-center"
            @click="handleLabelButtonClick(0)"
            :class="(fsr.label == 0 || fsr.label == null) ? '' : 'saturate-[0.1]'"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-10 w-10"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              stroke-width="2"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
              />
            </svg>
          </div>
          <div
            class="cursor-pointer border-t-2 bg-gray-500 flex justify-center items-center"
            @click="fsr.label = null; reasoningMenu = !reasoningMenu"
          >
            <div class="space-y-2">
              <div class="w-8 h-0.5 bg-white"></div>
              <div class="w-8 h-0.5 bg-white"></div>
              <div class="w-8 h-0.5 bg-white"></div>
            </div>
          </div>
        </div>
        <div
          class="cursor-pointer border-l-8 bg-green-500 flex justify-center items-center rounded-tr-2xl"
          @click="handleLabelButtonClick(1)"
          :class="(fsr.label == 1 || fsr.label == null) ? '' : 'saturate-[0.1]'"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-10 w-10"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fill-rule="evenodd"
              d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
              clip-rule="evenodd"
            />
          </svg>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener("alpine:init", () => {
    const headers = {
      Accept: "application/json",
      "Content-Type": "application/json",
      "X-Requested-With": "XMLHttpRequest",
      "X-CSRF-Token": document.querySelector("[name='csrf-token']").content,
    };
    Alpine.data("screenStore", () => ({
      desktop: false,
      reasoningMenu: false,
      addReasonModal: { on: false, type: "", action: "" },
      historyPanel: false,
      confirmationModalLabel: null,
      confirmationModal: false,
      confirmationModalText: "",
      confirmationModalTexts: {
        "-1": "Rejected",
        0: "Maybe",
        1: "Accepted",
      },
      citation: {
        fulltext_screening_id: "",
        citation_id: "",
        title: "",
        journal: "",
        authors: "",
        abstract: "",
        keywords: "",
        id: "",
        journal_meta_info: "",
      },
      options: {
        yes_tag_required: null,
        no_tag_required: null,
        maybe_tag_required: null,
        yes_reason_required: null,
        no_reason_required: null,
        maybe_reason_required: null,
        yes_note_required: null,
        no_note_required: null,
        maybe_note_required: null,
      },
      fsr: {
        id: null,
        label: null,
        custom_reasons: [],
        custom_tags: [],
        notes: "",
      },
      cps: [],
      cssWordClass: {
        2: "text-green-500 font-black",
        1: "text-green-500",
        0: "",
        "-1": "text-red-500",
        "-2": "text-red-500 font-black",
      },
      textarea_keywords_and_phrases: "",
      newCustomValue: "",
      updateCustomId: null,
      disable_textarea_keywords_and_phrases: false,
      resolutionMode:
        new URL(window.location.href).searchParams.get("resolution_mode") ==
        "true",
      show_all_labels: false,
      project_id: null,

      init() {
        const url = new URL(window.location.href);
        const fsr_id = url.searchParams.get("fsr_id");
        this.getFsrId(fsr_id);

        const smallDevice = window.matchMedia("(min-width: 1024px)");
        smallDevice.addListener(handleDeviceChange);
        const that = this;
        function handleDeviceChange(e) {
          if (e.matches) {
            that.desktop = true;
          } else {
            that.desktop = false;
          }
        }
        handleDeviceChange(smallDevice);
      },

      requireReasoning() {
        return (
          (this.fsr.label == -1 &&
            (this.options.no_tag_required ||
              this.options.no_reason_required ||
              this.options.no_note_required)) ||
          (this.fsr.label == 0 &&
            (this.options.maybe_tag_required ||
              this.options.maybe_reason_required ||
              this.options.maybe_note_required)) ||
          (this.fsr.label == 1 &&
            (this.options.yes_tag_required ||
              this.options.yes_reason_required ||
              this.options.yes_note_required))
        );
      },

      hasSomeReason() {
        return this.fsr.custom_reasons.some((v) => v.selected);
      },

      hasSomeTag() {
        return this.fsr.custom_tags.some((v) => v.selected);
      },

      hasSomeNote() {
        return this.fsr.notes.length > 0;
      },

      satisfiesReasoning() {
        if (this.fsr.label == null) return false;
        let satisfactory = true;
        if (this.fsr.label == -1) {
          if (this.options.no_tag_required)
            satisfactory = this.hasSomeTag() && satisfactory;
          if (this.options.no_reason_required)
            satisfactory = this.hasSomeReason() && satisfactory;
          if (this.options.no_note_required)
            satisfactory = this.hasSomeNote() && satisfactory;
        }
        if (this.fsr.label == 0) {
          if (this.options.maybe_tag_required)
            satisfactory = this.hasSomeTag() && satisfactory;
          if (this.options.maybe_reason_required)
            satisfactory = this.hasSomeReason() && satisfactory;
          if (this.options.maybe_note_required)
            satisfactory = this.hasSomeNote() && satisfactory;
        }
        if (this.fsr.label == 1) {
          if (this.options.yes_tag_required)
            satisfactory = this.hasSomeTag() && satisfactory;
          if (this.options.yes_reason_required)
            satisfactory = this.hasSomeReason() && satisfactory;
          if (this.options.yes_note_required)
            satisfactory = this.hasSomeNote() && satisfactory;
        }
        return satisfactory;
      },

      invalidCustomValue() {
        if (this.newCustomValue == "") {
          toastr.error("This field cannot be empty.");
          return true;
        }

        if (
          this.addReasonModal.type == "custom_reasons" &&
          this.fsr["custom_reasons"].some(
            (custom_reason) =>
              custom_reason.name == this.newCustomValue && !!custom_reason.id
          )
        ) {
          toastr.error("This value has already been taken.");
          return true;
        }

        if (
          this.addReasonModal.type == "custom_tags" &&
          this.fsr["custom_tags"].some(
            (custom_tag) =>
              custom_tag.name == this.newCustomValue && !!custom_tag.id
          )
        ) {
          toastr.error("This value has already been taken.");
          return true;
        }

        return false;
      },

      async createCustomValue() {
        let url;
        if (this.addReasonModal.type == "custom_reasons") {
          url = `/projects/${this.project_id}/projects_reasons?screening_type=fulltext`;
        } else if (this.addReasonModal.type == "custom_tags") {
          url = `/projects/${this.project_id}/projects_tags?screening_type=fulltext`;
        }
        const response = await fetch(url, {
          method: "POST",
          headers,
          body: JSON.stringify({
            name: this.newCustomValue.trim(),
          }),
        });
        await response.json();
        await this.getFsr();
        this.addReasonModal.on = false;
        this.newCustomValue = "";
      },

      async updateCustomValue(type, values) {
        const id = values.id;
        const newCustomValue = values.newCustomValue || false;
        let url;
        if (type == "custom_reasons") {
          url = `/projects_reasons/${id}`;
        } else if (type == "custom_tags") {
          url = `/projects_tags/${id}`;
        }
        const response = await fetch(url, {
          method: "PATCH",
          headers,
          body: JSON.stringify({
            newCustomValue,
          }),
        });
        await response.json();
        await this.getFsr();
        this.addReasonModal.on = false;
        this.newCustomValue = "";
      },

      async updateOrderings(dragPos, dropPos, orderableKey, table) {
        const temp = this.fsr[orderableKey][dropPos];
        this.fsr[orderableKey][dropPos] = this.fsr[orderableKey][dragPos];
        this.fsr[orderableKey][dragPos] = temp;
        const tempOrderableElements = this.fsr[orderableKey];
        this.fsr[orderableKey] = [];
        this.$nextTick(() => {
          this.fsr[orderableKey] = tempOrderableElements;
          const orderings = {};
          tempOrderableElements.forEach(
            (oe, index) => (orderings[index] = { id: oe.id, table })
          );
          fetch("/api/v1/orderings/update_positions", {
            method: "PATCH",
            headers,
            body: JSON.stringify({ orderings }),
          });
          this.fsr[orderableKey].forEach((el, index) => (el.pos = index + 1));
        });
      },

      async deleteCustomValue(type, index) {
        const id = this.fsr[type][index].id;
        if (
          confirm(
            `Would you like to delete "${this.fsr[type][index].name}" as a custom choice?`
          )
        ) {
          let url;
          if (type == "custom_reasons") {
            url = `/projects_reasons/${id}`;
          } else if (type == "custom_tags") {
            url = `/projects_tags/${id}`;
          }
          const response = await fetch(url, {
            method: "DELETE",
            headers,
            body: JSON.stringify({
              id,
              destroyExistingValues: true,
            }),
          });
          await response.json();
          await this.getFsr();
        }
      },

      closeAllModals() {
        if (this.addReasonModal.on) {
          this.addReasonModal.on = false;
        } else {
          this.reasoningMenu = false;
        }
      },

      showConfirmation(label) {
        this.closeAllModals();
        this.confirmationModalLabel = label;
        this.confirmationModalText = this.confirmationModalTexts[label];
        this.confirmationModal = true;
      },

      async updateReasonsSelection(reason) {
        reason.selected = !reason.selected;
        if (reason.selected) {
          await fetch(
            `/fulltext_screening_results/${this.fsr.id}/fulltext_screening_results_reasons`,
            {
              method: "POST",
              headers,
              body: JSON.stringify({
                reason_id: reason.reason_id,
              }),
            }
          );
          this.getFsr();
        } else {
          await fetch(
            `/fulltext_screening_results_reasons/${reason.selected_id}`,
            {
              method: "DELETE",
              headers,
            }
          );
          reason.selected_id = null;
        }
      },

      async updateTagsSelection(tag) {
        tag.selected = !tag.selected;
        if (tag.selected) {
          await fetch(
            `/fulltext_screening_results/${this.fsr.id}/fulltext_screening_results_tags`,
            {
              method: "POST",
              headers,
              body: JSON.stringify({
                tag_id: tag.tag_id,
              }),
            }
          );
          this.getFsr();
        } else {
          await fetch(`/fulltext_screening_results_tags/${tag.selected_id}`, {
            method: "DELETE",
            headers,
          });
          tag.selected_id = null;
        }
      },

      async getFsrId(fsrId) {
        let url = "";
        if (fsrId) {
          url = `/fulltext_screenings/<%= params[:fulltext_screening_id] %>/screen?fsr_id=${fsrId}`;
        } else {
          url = `/fulltext_screenings/<%= params[:fulltext_screening_id] %>/screen`;
        }
        const response = await fetch(url, {
          method: "GET",
          headers,
        });
        const data = await response.json();

        this.fsr.id = data.fsr_id;
        if (this.fsr.id == null) {
          const screeningsType = 'fulltext';
          const checkRoleResponse = await fetch(`/check_role/${screeningsType}/${this.project_id}`);
          const { check_condition, redirect_url } = await checkRoleResponse.json();
          if (check_condition) {
            window.location.href = redirect_url;
          } else {
            window.location.href = `/${screeningsType}_screenings/<%= params[:fulltext_screening_id] %>?screening_finished=true`;
          }
        }
        this.getFsr();
      },

      async updateFsr(submissionType, originalLabel) {
        if (submissionType === "label") {
          this.showConfirmation(this.fsr.label);
        }
        await this.fetchFsr("PATCH", submissionType, originalLabel);
        this.confirmationModal = false;
      },

      async getFsr() {
        this.fetchFsr("GET");
      },

      async fetchFsr(method, submissionType, originalLabel = null) {
        baseUrl = window.location.href.split("?")[0];
        window.history.pushState("", "", baseUrl);
        const customHeaders = {
          method,
          headers,
        };

        if (method == "PATCH") {
          customHeaders.body = JSON.stringify({
            fsr: this.fsr,
            submissionType,
          });
        }
        const response = await fetch(
          `/fulltext_screening_results/${this.fsr.id}`,
          customHeaders
        );
        const data = await response.json();

        if (submissionType === "label" && originalLabel === null) {
          return this.getFsrId();
        }
        if (method == "GET") {
          this.fsr = data.fsr;
          this.citation = data.citation;
          this.options = data.options;
          this.cps = data.cps;
          this.project_id = data.project_id;
        }
        this.updateLink();
      },

      async updateLink() {
        const { check_condition, redirect_url } = await this.checkRole();
        const linkElement = document.getElementById("dynamic-link");
        if (check_condition) {
          linkElement.setAttribute("href", redirect_url);
        }
      },

      async checkRole() {
        const screeningsType = 'fulltext';
        const checkRoleResponse = await fetch(`/check_role/${screeningsType}/${this.project_id}`);
        const { check_condition, redirect_url } = await checkRoleResponse.json();
        return { check_condition, redirect_url };
      },

      handleLabelButtonClick(newLabel) {
        const originalLabel = this.fsr.label;
        this.fsr.label = newLabel;

        if (this.satisfiesReasoning()) {
          this.updateFsr("label", originalLabel);
        } else {
          toastr.warning(
            "This label requires additional information.  Please see 'Required for labels'.",
            "",
            { timeOut: 2000 }
          );
          this.fsr.label = originalLabel;
        }

        if (this.requireReasoning()) {
          this.reasoningMenu = true;
        } else {
          this.updateFsr("label", originalLabel);
        }
      },
    }));
  });
</script>
