.nested-fields
  = f.input :name, label: 'Description', input_html: { oninput: 'this.style.height = "";this.style.height = this.scrollHeight + "px"' }
  /#sdAnalyticFrameworkDropzone.dropzone name='analyticFrameworkUploader'
    .fallback
      = f.input :pictures, as: :file, label: 'Pictures', input_html: { multiple: true }
  div[style='margin-top:20px;']
    label
      | PICTURES
    .sd-drop-area[style='border: solid 1px;padding:20px;max-width:50%;']
      span
        | Drop or select images
      = f.input :pictures, as: :file, label: false, input_html: { multiple: true, accept:'image/*' }
    .gallery

  div
    = link_to_remove_association "Remove Framework", f
    - f.object.pictures.each do |picture|
      div
        = image_tag(picture, class: 'openable', style: 'height:100%;width:auto;')
        br
        = link_to 'Remove Figure', delete_image_attachment_picture_path(picture.id), method: :delete, data: { confirm: 'Are you sure?' }, remote: true

css:
  .sd-drop-area.highlight {
    border: dashed 5px !important;
    border-color: purple !important;
  }

javascript:
  var dropArea = $( '.sd-drop-area' )[ 0 ]

  initializeListeners( dropArea )

  $( '#sd-container' ).on( 'cocoon:after-insert', function(e, insertedItem, originalEvent) { 
    initializeListeners( $( insertedItem ).find( '.sd-drop-area' )[ 0 ] )
  })

  function initializeListeners( elem ) {
    ;['dragenter', 'dragover'].forEach(eventName => {
      elem.addEventListener(eventName, highlight, false)
    })

    ;['dragleave', 'drop'].forEach(eventName => {
      elem.addEventListener(eventName, unhighlight, false)
    })

    ;['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      elem.addEventListener(eventName, preventDefaults, false)
    })

    elem.addEventListener('drop', handleDrop, false)

    $( elem ).find( 'input' ).change( function( e ){ 
      updatePreviews( e.target )
    })
  }
  

  function preventDefaults (e) {
    e.preventDefault()
    e.stopPropagation()
  }

  function handleDrop(e) {
    let dt = e.dataTransfer
    let files = dt.files
    files = [...files]

    input_elem = $( e.target ).parent().find( 'input' )[ 0 ]
    input_elem.files = e.dataTransfer.files;

    updatePreviews( input_elem )
  }

  function updatePreviews( elem ) {
    gallery = $( elem ).closest( '.sd-drop-area' ).parent().find( '.gallery' )[ 0 ]
    $( gallery ).empty()
    let files = elem.files
    $.each(files, function(i, file) {
      previewFile( gallery, file )
    })
  }

  function highlight(e) {
    $( e.target ).closest( '.sd-drop-area' )[ 0 ].classList.add( 'highlight' )
  }

  function unhighlight(e) {
    $( e.target ).closest( '.sd-drop-area' )[ 0 ].classList.remove( 'highlight' )
  }

  function previewFile(gallery, file) {
    let reader = new FileReader()
    reader.readAsDataURL(file)
    reader.onloadend = function() {
      let img = document.createElement('img')
      img.src = reader.result
      gallery.appendChild(img)
    }
  }
