<div x-data="sdMetaDatum" class="p-4 lg:p-8 space-y-2">
  <div class="font-bold text-sm">
    <div class="flex justify-between">
      <div>
        SRDR+ Project: <%= link_to(@project.try(:name) || 'None',
        project_path(@project), target: '_blank') %>
      </div>

      <div class="flex justify-center items-center text-xs">
        Complete
        <button
          type="button"
          class="ml-2 group relative inline-flex h-5 w-10 flex-shrink-0 cursor-pointer items-center justify-center rounded-full focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
          role="switch"
          aria-checked="false"
          @click="enabled = !enabled"
        >
          <span class="sr-only">Use setting</span>
          <span
            aria-hidden="true"
            class="pointer-events-none absolute h-full w-full rounded-md bg-white"
          ></span>
          <span
            aria-hidden="true"
            class="pointer-events-none absolute mx-auto h-4 w-9 rounded-full transition-colors duration-200 ease-in-out"
            :class="enabled ? 'bg-indigo-600' : 'bg-gray-200'"
          ></span>
          <span
            aria-hidden="true"
            class="pointer-events-none absolute left-0 inline-block h-5 w-5 transform rounded-full border border-gray-200 bg-white shadow ring-0 transition-transform duration-200 ease-in-out"
            :class="enabled ? 'translate-x-5' : 'translate-x-0'"
          ></span>
        </button>
      </div>
    </div>
    <div class="flex justify-between">
      <div>
        <% if @systematic_review_report %> Source Systematic Review Report:
        <a data-toggle="offCanvasRightReportHtml" id="report-title">
          <!-- prettier-ignore -->
          <%= @sd_meta_datum.try(:report_title) || @report.try(:title) || @sd_meta_datum.report_file.filename || 'None' %>
        </a>
        <% end %>
      </div>
      <div
        class="bg-srdrpurple text-white text-xs p-1 rounded-md cursor-pointer"
      >
        See Section Preview
      </div>
    </div>
    <div class="w-full bg-gray-200 rounded-full p-1 my-1">
      <div
        class="bg-green-600 p-1 text-white rounded-full text-center"
        style="width: 50%"
      ></div>
    </div>
  </div>
  <div class="flex w-full">
    <div class="border text-sm font-bold w-3/12 xl:w-1/12">
      <a href="/sd_meta_data/307/edit?panel_number=0&new_template=true">
        <div
          class="p-1 py-4 cursor-pointer border-b-2"
          :class="panel_number == 0 ? 'bg-purple-100' : ''"
        >
          Title, Funding Sources, and Dates
        </div>
      </a>
      <a href="/sd_meta_data/307/edit?panel_number=1&new_template=true">
        <div
          class="p-1 py-4 cursor-pointer border-b-2"
          :class="panel_number == 1 ? 'bg-purple-100' : ''"
        >
          Authors and Stakeholders
        </div>
      </a>
      <a href="/sd_meta_data/307/edit?panel_number=2&new_template=true">
        <div
          class="p-1 py-4 cursor-pointer border-b-2"
          :class="panel_number == 2 ? 'bg-purple-100' : ''"
        >
          URL Links
        </div>
      </a>
      <a href="/sd_meta_data/307/edit?panel_number=3&new_template=true">
        <div
          class="p-1 py-4 cursor-pointer border-b-2"
          :class="panel_number == 3 ? 'bg-purple-100' : ''"
        >
          Purpose, Analytic Framework, and Key Questions
        </div>
      </a>
      <a href="/sd_meta_data/307/edit?panel_number=4&new_template=true">
        <div
          class="p-1 py-4 cursor-pointer border-b-2"
          :class="panel_number == 4 ? 'bg-purple-100' : ''"
        >
          PICODTS
        </div>
      </a>
      <a href="/sd_meta_data/307/edit?panel_number=5&new_template=true">
        <div
          class="p-1 py-4 cursor-pointer border-b-2"
          :class="panel_number == 5 ? 'bg-purple-100' : ''"
        >
          Key Question Mapping
        </div>
      </a>
      <a href="/sd_meta_data/307/edit?panel_number=6&new_template=true">
        <div
          class="p-1 py-4 cursor-pointer border-b-2"
          :class="panel_number == 6 ? 'bg-purple-100' : ''"
        >
          Search Strategy and Results of Screening
        </div>
      </a>
      <a href="/sd_meta_data/307/edit?panel_number=7&new_template=true">
        <div
          class="p-1 py-4 cursor-pointer border-b-2"
          :class="panel_number == 7 ? 'bg-purple-100' : ''"
        >
          Risk of Bias and Overall Summary of Evidence
        </div>
      </a>
      <a href="/sd_meta_data/307/edit?panel_number=8&new_template=true">
        <div
          class="p-1 py-4 cursor-pointer border-b-2"
          :class="panel_number == 8 ? 'bg-purple-100' : ''"
        >
          Results for Individual Outcomes
        </div>
      </a>
    </div>

    <%= render "sd_meta_data/form/#{params[:panel_number]}" %>
  </div>
</div>

<script>
  document.addEventListener("alpine:init", () => {
    Alpine.data("sdMetaDatum", () => ({
      sdMetaDatum: {},
      enabled: true,
      panel_number: null,
      sdMetaDatumId: /\d+/.exec(window.location.pathname)[0],
      panel_number: new URLSearchParams(window.location.search).get(
        "panel_number"
      ),

      async init() {
        await this.getSdMetaDatum(this.sdMetaDatumId);
      },

      async initSelect2(
        resourceElement,
        resource,
        selected,
        url,
        multiParams = false,
        custom_resource_url
      ) {
        jResourceElement = $(resourceElement);
        jResourceElement.select2({
          tags: true,
          ajax: {
            url: `/${custom_resource_url || resource}`,
            dataType: "json",
            processResults: (data, params) => {
              params.page = params.page || 1;
              return {
                results: $.map(data.items, (i) => {
                  return {
                    id: i.id,
                    text: i.name,
                  };
                }),
              };
            },
          },
          createTag: function (params) {
            return {
              id: params.term,
              text: params.term,
              newTag: true,
            };
          },
        });

        const that = this;
        jResourceElement.on("select2:select", async function (e) {
          if (multiParams) {
            that.apiCall(`/${url || resource}`, "POST", {
              name: e.params.data.text,
              ...multiParams,
            });
          } else {
            if (e.params.data.newTag) {
              const response = await that.apiCall(`/${resource}`, "POST", {
                name: e.params.data.text,
              });
              that.updateResource(
                url ? `/${url}` : `/sd_meta_data/${that.sdMetaDatumId}`,
                `${resource.substring(0, resource.length - 1)}_id`,
                response.id
              );
            } else {
              that.updateResource(
                url ? `/${url}` : `/sd_meta_data/${that.sdMetaDatumId}`,
                `${resource.substring(0, resource.length - 1)}_id`,
                e.params.data.id
              );
            }
          }
        });

        jResourceElement.on("select2:unselect", function (e) {
          if (resource === "sd_outcomes") {
            that.apiCall(`/${resource}/null`, "DELETE", {
              name: e.params.data.text,
              ...multiParams,
            });
          } else if (multiParams) {
            that.apiCall(`/${url || resource}/null`, "DELETE", {
              name: e.params.data.text,
              ...multiParams,
            });
          } else {
            that.updateResource(
              url ? `/${url}` : `/sd_meta_data/${that.sdMetaDatumId}`,
              `${resource.substring(0, resource.length - 1)}_id`,
              null
            );
          }
        });
        selected.forEach((selectedOption) => {
          const option = new Option(
            selectedOption.name,
            selectedOption.id,
            true,
            true
          );
          jResourceElement.append(option).trigger("change");
        });
      },

      async uploadFiles(element, url, resource, parentObject) {
        let formData = new FormData();
        for (let i = 0; i < element.files.length; i++) {
          formData.append("pictures[]", element.files[i]);
        }
        const response = await fetch(url, {
          method: "PATCH",
          headers: {
            "X-CSRF-Token": document.querySelector("[name='csrf-token']")
              .content,
          },
          body: formData,
        });
        const newResource = await response.json();
        parentObject[resource] = newResource.pictures;
      },

      async updateResource(url, attribute, value) {
        this.apiCall(url, "PATCH", {
          [attribute]: value,
        });
      },

      async updateSdMetaDatum(attribute, value) {
        this.apiCall(`/sd_meta_data/${this.sdMetaDatumId}`, "PATCH", {
          [attribute]: value,
        });
      },

      async updateSubResource(resource, id, method, key, value) {
        this.apiCall(`/${resource}/${id}`, method, {
          [key]: value,
        });
      },

      async createSubResource(
        resource,
        parentResource,
        parentResourceId,
        parentObject
      ) {
        const response = await this.apiCall(
          `/${parentResource}/${parentResourceId}/${resource}`,
          "POST"
        );
        parentObject[resource].push(response);
      },

      async apiCall(url, method, params = {}) {
        const options = {
          method: method,
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
            "X-CSRF-Token": document.querySelector("[name='csrf-token']")
              .content,
          },
        };
        if (method !== "GET") {
          options.body = JSON.stringify(params);
        }
        const response = await fetch(url, options);
        return await response.json();
      },

      async getSdMetaDatum(id) {
        const sdMetaDatum = await this.apiCall(
          `/sd_meta_data/${id}/edit`,
          "GET"
        );
        this.sdMetaDatum = sdMetaDatum;
      },
    }));
  });
</script>
