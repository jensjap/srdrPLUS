<div
  x-cloak
  x-show="modal"
  @keyup.escape.window="modal = !modal"
  x-trap.noscroll="modal"
  x-data="chat"
  class="inset-0 fixed z-50"
  x-transition:enter="ease-out duration-300"
  x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
  x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100"
  x-transition:leave="ease-in duration-200"
  x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100"
  x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
>
  <div class="flex flex-row h-screen antialiased text-gray-800">
    <div class="flex flex-row w-96 flex-shrink-0 bg-gray-100 p-4">
      <div
        class="flex flex-col items-center py-4 flex-shrink-0 w-12 bg-srdrpurple rounded-tl-2xl rounded-bl-2xl"
      >
        <ul class="flex flex-col space-y-8 mt-12 list-none m-0">
          <li>
            <a href="#" class="flex items-center">
              <span
                class="flex items-center justify-center text-indigo-100 hover:bg-srdrpurple-light h-8 w-8 rounded-md"
                :class="{
                  'bg-srdrpurple-light': selected_room_type === 'projects'
                }"
                @click="selected_room_type = 'projects'; selected_rooms = project_rooms; selected_room = project_rooms[0];"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke-width="1.5"
                  stroke="currentColor"
                  class="w-6 h-6"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="m2.25 12 8.954-8.955c.44-.439 1.152-.439 1.591 0L21.75 12M4.5 9.75v10.125c0 .621.504 1.125 1.125 1.125H9.75v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21h4.125c.621 0 1.125-.504 1.125-1.125V9.75M8.25 21h8.25"
                  />
                </svg>
              </span>
            </a>
          </li>
          <li>
            <a href="#" class="flex items-center">
              <span
                class="flex items-center justify-center text-indigo-100 hover:bg-srdrpurple-light h-8 w-8 rounded-md"
                :class="{
                  'bg-srdrpurple-light': selected_room_type === 'users'
                }"
                @click="selected_room_type = 'users'; selected_rooms = user_rooms; selected_room = user_rooms[0];"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke-width="1.5"
                  stroke="currentColor"
                  class="w-6 h-6"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="M18 18.72a9.094 9.094 0 0 0 3.741-.479 3 3 0 0 0-4.682-2.72m.94 3.198.001.031c0 .225-.012.447-.037.666A11.944 11.944 0 0 1 12 21c-2.17 0-4.207-.576-5.963-1.584A6.062 6.062 0 0 1 6 18.719m12 0a5.971 5.971 0 0 0-.941-3.197m0 0A5.995 5.995 0 0 0 12 12.75a5.995 5.995 0 0 0-5.058 2.772m0 0a3 3 0 0 0-4.681 2.72 8.986 8.986 0 0 0 3.74.477m.94-3.197a5.971 5.971 0 0 0-.94 3.197M15 6.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm6 3a2.25 2.25 0 1 1-4.5 0 2.25 2.25 0 0 1 4.5 0Zm-13.5 0a2.25 2.25 0 1 1-4.5 0 2.25 2.25 0 0 1 4.5 0Z"
                  />
                </svg>
              </span>
            </a>
          </li>
          <li>
            <a href="#" class="flex items-center">
              <span
                class="flex items-center justify-center text-indigo-100 hover:bg-srdrpurple-light h-8 w-8 rounded-md"
                :class="{
                  'bg-srdrpurple-light': selected_room_type === 'extractions'
                }"
                @click="selected_room_type = 'extractions'; selected_rooms = extraction_rooms; selected_room = extraction_rooms[0];"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke-width="1.5"
                  stroke="currentColor"
                  class="w-6 h-6"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z"
                  />
                </svg>
              </span>
            </a>
          </li>
          <li>
            <a href="#" class="flex items-center">
              <span
                class="flex items-center justify-center text-indigo-100 hover:bg-srdrpurple-light h-8 w-8 rounded-md"
                :class="{
                  'bg-srdrpurple-light': selected_room_type === 'screenings'
                }"
                @click="selected_room_type = 'screenings'; selected_rooms = screening_rooms; selected_room = screening_rooms[0];"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke-width="1.5"
                  stroke="currentColor"
                  class="w-6 h-6"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="M12 3v17.25m0 0c-1.472 0-2.882.265-4.185.75M12 20.25c1.472 0 2.882.265 4.185.75M18.75 4.97A48.416 48.416 0 0 0 12 4.5c-2.291 0-4.545.16-6.75.47m13.5 0c1.01.143 2.01.317 3 .52m-3-.52 2.62 10.726c.122.499-.106 1.028-.589 1.202a5.988 5.988 0 0 1-2.031.352 5.988 5.988 0 0 1-2.031-.352c-.483-.174-.711-.703-.59-1.202L18.75 4.971Zm-16.5.52c.99-.203 1.99-.377 3-.52m0 0 2.62 10.726c.122.499-.106 1.028-.589 1.202a5.989 5.989 0 0 1-2.031.352 5.989 5.989 0 0 1-2.031-.352c-.483-.174-.711-.703-.59-1.202L5.25 4.971Z"
                  />
                </svg>
              </span>
            </a>
          </li>
        </ul>
      </div>
      <div class="flex flex-col w-full h-full pl-4 pr-4 py-4 -mr-4">
        <div class="flex flex-row items-center">
          <div class="flex flex-row items-center">
            <div class="text-xl font-semibold">Messages</div>
            <!-- <div
              class="flex items-center justify-center ml-2 text-xs h-5 w-5 text-white bg-red-500 rounded-full font-medium"
            >
              5
            </div> -->
          </div>
        </div>
        <div class="mt-5">
          <div
            class="text-xs text-gray-400 font-semibold uppercase"
            x-text="`${selected_room_type.toUpperCase()} (${selected_rooms.length})`"
          ></div>
        </div>
        <div class="mt-2 overflow-y-auto overflow-x-hidden">
          <div class="flex flex-col space-y-1">
            <template x-for="room in selected_rooms">
              <div
                class="relative flex flex-row items-center pr-2 pl-0 cursor-pointer"
                @click="selected_room = room; selected_messages = messages[room]"
              >
                <!-- <div
                  class="absolute text-xs text-gray-500 right-0 top-0 mr-8 mt-3"
                >
                  5 min
                </div> -->
                <div
                  class="flex flex-col flex-grow p-2 rounded-md"
                  :class="{
                    'bg-srdrpurple': selected_room === room,
                    'text-white': selected_room === room,
                    'bg-gray-200': selected_room !== room,
                    'text-black': selected_room !== room,
                  }"
                >
                  <div class="text-sm font-medium" x-text="room"></div>
                  <div
                    class="text-xs truncate w-40"
                    :class="{
                      'text-gray-400': (!messages[room] || messages[room].length === 0),
                      'italic': (messages[room] && messages[room].length > 0)
                    }"
                    x-text="(messages[room] && `...${messages[room][0].text}`) || 'no messages'"
                  ></div>
                </div>
                <!-- <div class="flex-shrink-0 ml-2 mr-4 self-end mb-1">
                  <span
                    class="flex items-center justify-center h-5 w-5 bg-red-500 text-white text-xs rounded-full"
                    >5</span
                  >
                </div> -->
              </div>
            </template>
          </div>
        </div>
      </div>
    </div>
    <div class="flex flex-col h-full w-full bg-white px-4 py-6">
      <div
        x-cloak
        x-show="selected_messages && selected_messages.length > 0"
        class="flex flex-col-reverse h-full w-full gap-y-2 overflow-auto"
      >
        <template x-for="message in selected_messages">
          <div
            class="p-3 rounded-lg"
            :class="{
                'col-start-1': message.user_id !== current_user_id,
                'col-end-8': message.user_id !== current_user_id,
                'col-start-6': message.user_id === current_user_id,
                'col-end-13': message.user_id === current_user_id,
              }"
          >
            <div
              class="flex"
              :class="{
                  'flex-row': message.user_id !== current_user_id,
                  'items-center': message.user_id !== current_user_id,
                  'items-center': message.user_id === current_user_id,
                  'justify-start': message.user_id === current_user_id,
                  'flex-row-reverse': message.user_id === current_user_id,
                }"
            >
              <div
                class="relative ml-3 text-sm py-2 px-4 shadow rounded-xl"
                :class="{
                    'bg-white': message.user_id !== current_user_id,
                    'bg-indigo-100': message.user_id === current_user_id,
                  }"
              >
                <div x-text="message.text"></div>
                <div
                  class="text-xs text-gray-500 text-nowrap text-right"
                  x-text="`${message.handle} wrote at ${new Date(message.created_at).toLocaleString()}`"
                ></div>
              </div>
            </div>
          </div>
        </template>
      </div>
      <template x-if="!selected_messages || selected_messages?.length === 0">
        <div class="h-full w-full flex justify-center items-center">
          <div>No Messages</div>
        </div>
      </template>

      <div class="flex flex-row items-center">
        <div
          class="flex flex-row items-center w-full border rounded-3xl h-12 px-2"
        >
          <div class="w-full m-4">
            <input
              type="text"
              class="w-full !focus:outline-none !border-none !text-sm !h-8 !p-2"
              placeholder="Type message..."
              x-model="chat_text[selected_room]"
              @keyup.enter="sendMessage()"
            />
          </div>
        </div>
        <div class="ml-6">
          <button
            class="flex items-center justify-center h-8 w-8 rounded-full hover:bg-srdrpurple-light text-white bg-srdrpurple cursor-pointer"
          >
            <svg
              class="w-5 h-5 transform rotate-90 -mr-px"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"
              ></path>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener("alpine:init", () => {
    const headers = {
      Accept: "application/json",
      "Content-Type": "application/json",
      "X-Requested-With": "XMLHttpRequest",
      "X-CSRF-Token": document.querySelector("[name='csrf-token']").content,
    };
    Alpine.data("chat", () => ({
      modal: true,
      selected_room_type: "projects",
      selected_room: null,
      selected_rooms: [],
      selected_messages: [],
      messages: [],
      project_rooms: [],
      user_rooms: [],
      extraction_rooms: [],
      screening_rooms: [],
      current_user_id: null,
      chat_text: {},

      async init() {
        await this.fetchRooms();
        this.selected_rooms = this.project_rooms;
        this.selected_room = this.selected_rooms[0];
        this.selected_messages = this.messages[this.selected_rooms[0]];
        await this.setupWS();
      },

      async sendMessage() {
        const response = await fetch("/messages", {
          method: "POST",
          headers,
          body: JSON.stringify({
            room: this.selected_room,
            text: this.chat_text[this.selected_room],
          }),
        });
        const data = await response.json();
        this.chat_text[this.selected_room] = "";
      },

      async fetchRooms() {
        const response = await fetch("/messages", {
          method: "GET",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
          },
        });
        const data = await response.json();
        this.project_rooms = data.project_rooms;
        this.user_rooms = data.user_rooms;
        this.extraction_rooms = data.extraction_rooms;
        this.screening_rooms = data.screening_rooms;
        this.messages = data.messages;
        this.current_user_id = data.current_user_id;
      },

      async setupWS() {
        const socket = new WebSocket("ws://localhost:3000/cable");

        socket.onopen = () => {
          console.log("WS connected");
          const msg = {
            command: "subscribe",
            identifier: JSON.stringify({
              channel: "ChatChannel",
            }),
          };
          socket.send(JSON.stringify(msg));
        };

        socket.onclose = () => {
          console.log("WS disconnected");
        };

        socket.onmessage = (event) => {
          const data = JSON.parse(event.data);
          if (data.type === "ping") {
            return;
          }
          const message = data.message;
          if (message) {
            this.messages[message.room]
              ? this.messages[message.room].unshift(message)
              : (this.messages[message.room] = [message]);
            if (this.selected_room == message.room) {
              this.selected_messages = this.messages[message.room];
            }
          }
        };
        socket.onerror = (error) => {
          console.log("WS error: ", error);
        };
      },
    }));
  });
</script>
